#include <pitches.h>

int melody0[] = {
NOTE_FS4,
NOTE_F4,
NOTE_FS4,
NOTE_D5,
NOTE_CS5,
NOTE_B4,
NOTE_A4,
NOTE_B4,
NOTE_A4,
NOTE_G4,
NOTE_FS4,
NOTE_E4,
NOTE_FS4,
NOTE_G4,
NOTE_A4,
NOTE_A4,
NOTE_E4,
NOTE_A4,
NOTE_CS5,
NOTE_B4,
NOTE_A4,
NOTE_G4,
NOTE_FS4,
NOTE_A4,
NOTE_B4,
NOTE_CS5,
NOTE_D5,
NOTE_CS5,
NOTE_B4,
NOTE_A4,
NOTE_FS4,
NOTE_F4,
NOTE_FS4,
NOTE_D5,
NOTE_CS5,
NOTE_B4,
NOTE_A4,
NOTE_B4,
NOTE_A4,
NOTE_G4,
NOTE_FS4,
NOTE_E4,
NOTE_FS4,
NOTE_G4,
NOTE_A4,
NOTE_A4,
NOTE_E4,
NOTE_A4,
NOTE_CS5,
NOTE_B4,
NOTE_A4,
NOTE_G4,
NOTE_FS4,
NOTE_E4,
NOTE_D4,
NOTE_E4,
NOTE_FS4,
NOTE_G4,
NOTE_A4,
NOTE_B4,
NOTE_FS4,
NOTE_E4,
NOTE_D4,
NOTE_E4,
NOTE_FS4,
NOTE_G4,
NOTE_A4,
NOTE_B4,
NOTE_A4,
NOTE_G4,
NOTE_E4,
NOTE_FS4,
NOTE_G4,
NOTE_A4,
NOTE_G4,
NOTE_FS4,
NOTE_E4,
NOTE_CS4,
NOTE_D4,
NOTE_E4,
NOTE_G4,
NOTE_FS4,
NOTE_G4,
NOTE_A4,
NOTE_B4,
NOTE_A4,
NOTE_D5,
NOTE_CS5,
NOTE_B4,
NOTE_A4,
NOTE_B4,
NOTE_CS5,
NOTE_D5,
NOTE_E5,
NOTE_D5,
NOTE_CS5,
NOTE_B4,
NOTE_CS5,
NOTE_D5,
NOTE_E5,
NOTE_CS5,
NOTE_B4,
NOTE_A4,
NOTE_G4,
NOTE_A4,
NOTE_B4,
NOTE_G4,
NOTE_A4,
NOTE_G4,
NOTE_FS4,
NOTE_E4,
NOTE_D4,
NOTE_E4,
NOTE_FS4,
NOTE_G4,
NOTE_FS4,
NOTE_F4,
NOTE_FS4,
NOTE_D5,
NOTE_CS5,
NOTE_B4,
NOTE_A4,
NOTE_B4,
NOTE_A4,
NOTE_G4,
NOTE_FS4,
NOTE_E4,
NOTE_FS4,
NOTE_G4,
NOTE_A4,
NOTE_A4,
NOTE_E4,
NOTE_A4,
NOTE_CS5,
NOTE_B4,
NOTE_A4,
NOTE_G4,
NOTE_FS4,
NOTE_A4,
NOTE_B4,
NOTE_CS5,
NOTE_D5,
NOTE_CS5,
NOTE_B4,
NOTE_A4,
NOTE_FS4,
NOTE_F4,
NOTE_FS4,
NOTE_D5,
NOTE_CS5,
NOTE_B4,
NOTE_A4,
NOTE_B4,
NOTE_A4,
NOTE_G4,
NOTE_FS4,
NOTE_E4,
NOTE_FS4,
NOTE_G4,
NOTE_A4,
NOTE_A4,
NOTE_E4,
NOTE_A4,
NOTE_CS5,
NOTE_B4,
NOTE_A4,
NOTE_G4,
NOTE_FS4,
NOTE_E4,
NOTE_D4,
NOTE_E4,
NOTE_FS4,
NOTE_G4,
NOTE_A4,
NOTE_B4,
NOTE_FS4,
NOTE_E4,
NOTE_D4,
NOTE_E4,
NOTE_FS4,
NOTE_G4,
NOTE_A4,
NOTE_B4,
NOTE_A4,
NOTE_G4,
NOTE_E4,
NOTE_FS4,
NOTE_G4,
NOTE_A4,
NOTE_G4,
NOTE_FS4,
NOTE_E4,
NOTE_CS4,
NOTE_D4,
NOTE_E4,
NOTE_G4,
NOTE_FS4,
NOTE_G4,
NOTE_A4,
NOTE_B4,
NOTE_A4,
NOTE_D5,
NOTE_CS5,
NOTE_B4,
NOTE_A4,
NOTE_B4,
NOTE_CS5,
NOTE_D5,
NOTE_E5,
NOTE_D5,
NOTE_CS5,
NOTE_B4,
NOTE_CS5,
NOTE_D5,
NOTE_E5,
NOTE_CS5,
NOTE_B4,
NOTE_A4,
NOTE_G4,
NOTE_A4,
NOTE_B4,
NOTE_G4,
NOTE_A4,
NOTE_G4,
NOTE_FS4,
NOTE_E4,
NOTE_D4,
NOTE_E4,
NOTE_FS4,
NOTE_G4,
};

int start_time0[] = {
0.0,
220588.0,
441176.0,
661764.0,
1102940.0,
1323528.0,
1544116.0,
1764704.0,
1985292.0,
2205880.0,
2426468.0,
2647056.0,
2867644.0,
3088232.0,
3308820.0,
3529408.0,
3749996.0,
3970584.0,
4191172.0,
4632348.0,
4852936.0,
5073524.0,
5294112.0,
5514700.0,
5735288.0,
5955876.0,
6176464.0,
6397052.0,
6617640.0,
6838228.0,
7058816.0,
7279404.0,
7499992.0,
7720580.0,
8161756.0,
8382344.0,
8602932.0,
8823520.0,
9044108.0,
9264696.0,
9485284.0,
9705872.0,
9926460.0,
10147048.0,
10367636.0,
10588224.0,
10808812.0,
11029400.0,
11249988.0,
11691164.0,
11911752.0,
12132340.0,
12352928.0,
12573516.0,
12794104.0,
13014692.0,
13235280.0,
13455868.0,
13676456.0,
13897044.0,
14117632.0,
14338220.0,
14558808.0,
14999984.0,
15220572.0,
15441160.0,
15661748.0,
15882336.0,
16102924.0,
16323512.0,
16764688.0,
16985276.0,
17205864.0,
17426452.0,
17647040.0,
17867628.0,
18088216.0,
18529392.0,
18749980.0,
18970568.0,
19191156.0,
19411744.0,
19632332.0,
19852920.0,
20073508.0,
20294096.0,
21176448.0,
21397036.0,
21617624.0,
22058800.0,
22279388.0,
22499976.0,
22720564.0,
22941152.0,
23161740.0,
23382328.0,
23823504.0,
24044092.0,
24264680.0,
24485268.0,
24705856.0,
24926444.0,
25147032.0,
25588208.0,
25808796.0,
26029384.0,
26249972.0,
26470560.0,
26691148.0,
26911736.0,
27132324.0,
27352912.0,
27573500.0,
27794088.0,
28014676.0,
28235264.0,
28455852.0,
28676440.0,
28897028.0,
29338204.0,
29558792.0,
29779380.0,
29999968.0,
30220556.0,
30441144.0,
30661732.0,
30882320.0,
31102908.0,
31323496.0,
31544084.0,
31764672.0,
31985260.0,
32205848.0,
32426436.0,
32867612.0,
33088200.0,
33308788.0,
33529376.0,
33749964.0,
33970552.0,
34191140.0,
34411728.0,
34632316.0,
34852904.0,
35073492.0,
35294080.0,
35514668.0,
35735256.0,
35955844.0,
36397020.0,
36617608.0,
36838196.0,
37058784.0,
37279372.0,
37499960.0,
37720548.0,
37941136.0,
38161724.0,
38382312.0,
38602900.0,
38823488.0,
39044076.0,
39264664.0,
39485252.0,
39926428.0,
40147016.0,
40367604.0,
40588192.0,
40808780.0,
41029368.0,
41249956.0,
41470544.0,
41691132.0,
41911720.0,
42132308.0,
42352896.0,
42573484.0,
42794072.0,
43235248.0,
43455836.0,
43676424.0,
43897012.0,
44117600.0,
44338188.0,
44558776.0,
44999952.0,
45220540.0,
45441128.0,
45661716.0,
45882304.0,
46102892.0,
46323480.0,
46764656.0,
46985244.0,
47205832.0,
47426420.0,
47647008.0,
47867596.0,
48088184.0,
48308772.0,
48529360.0,
49411712.0,
49632300.0,
49852888.0,
50294064.0,
50514652.0,
50735240.0,
50955828.0,
51176416.0,
51397004.0,
51617592.0,
52058768.0,
52279356.0,
52499944.0,
52720532.0,
52941120.0,
53161708.0,
53382296.0,
53823472.0,
54044060.0,
54264648.0,
54485236.0,
54705824.0,
54926412.0,
55147000.0,
55367588.0,
55588176.0,
55808764.0,
56029352.0,
56249940.0,
};

int duration0[] = {
220588.0,
220588.0,
220588.0,
441176.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
441176.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
441176.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
441176.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
441176.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
441176.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
441176.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
882352.0,
220588.0,
220588.0,
441176.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
441176.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
441176.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
441176.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
441176.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
441176.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
441176.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
441176.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
441176.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
441176.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
882352.0,
220588.0,
220588.0,
441176.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
441176.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
441176.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
};

int melody1[] = {
NOTE_D5,
NOTE_A4,
NOTE_D5,
NOTE_A5,
NOTE_G5,
NOTE_FS5,
NOTE_E5,
NOTE_CS5,
NOTE_A4,
NOTE_E4,
NOTE_CS5,
NOTE_A4,
NOTE_CS5,
NOTE_FS5,
NOTE_E5,
NOTE_CS5,
NOTE_D5,
NOTE_FS5,
NOTE_A4,
NOTE_E4,
NOTE_D5,
NOTE_A4,
NOTE_D5,
NOTE_A5,
NOTE_G5,
NOTE_FS5,
NOTE_E5,
NOTE_CS5,
NOTE_A4,
NOTE_E4,
NOTE_CS5,
NOTE_A4,
NOTE_CS5,
NOTE_FS5,
NOTE_E5,
NOTE_CS5,
NOTE_D5,
NOTE_D4,
NOTE_E4,
NOTE_FS5,
NOTE_A5,
NOTE_G5,
NOTE_A5,
NOTE_G5,
NOTE_FS5,
NOTE_E5,
NOTE_CS5,
NOTE_E5,
NOTE_FS5,
NOTE_G5,
NOTE_FS5,
NOTE_E5,
NOTE_D5,
NOTE_FS5,
NOTE_A5,
NOTE_G5,
NOTE_FS5,
NOTE_G5,
NOTE_A5,
NOTE_B5,
NOTE_A5,
NOTE_G5,
NOTE_FS5,
NOTE_G5,
NOTE_FS5,
NOTE_G5,
NOTE_FS5,
NOTE_E5,
NOTE_D5,
NOTE_D5,
NOTE_A4,
NOTE_D5,
NOTE_A5,
NOTE_G5,
NOTE_FS5,
NOTE_E5,
NOTE_CS5,
NOTE_A4,
NOTE_E4,
NOTE_CS5,
NOTE_A4,
NOTE_CS5,
NOTE_FS5,
NOTE_E5,
NOTE_CS5,
NOTE_D5,
NOTE_FS5,
NOTE_A4,
NOTE_E4,
NOTE_D5,
NOTE_A4,
NOTE_D5,
NOTE_A5,
NOTE_G5,
NOTE_FS5,
NOTE_E5,
NOTE_CS5,
NOTE_A4,
NOTE_E4,
NOTE_CS5,
NOTE_A4,
NOTE_CS5,
NOTE_FS5,
NOTE_E5,
NOTE_CS5,
NOTE_D5,
NOTE_D4,
NOTE_E4,
NOTE_FS5,
NOTE_A5,
NOTE_G5,
NOTE_A5,
NOTE_G5,
NOTE_FS5,
NOTE_E5,
NOTE_CS5,
NOTE_E5,
NOTE_FS5,
NOTE_G5,
NOTE_FS5,
NOTE_E5,
NOTE_D5,
NOTE_FS5,
NOTE_A5,
NOTE_G5,
NOTE_FS5,
NOTE_G5,
NOTE_A5,
NOTE_B5,
NOTE_A5,
NOTE_G5,
NOTE_FS5,
NOTE_G5,
NOTE_FS5,
NOTE_G5,
NOTE_FS5,
NOTE_E5,
NOTE_D5,
};

int start_time1[] = {
0.0,
220588.0,
441176.0,
661764.0,
1102940.0,
1544116.0,
1764704.0,
1985292.0,
2647056.0,
3088232.0,
3529408.0,
3749996.0,
3970584.0,
4191172.0,
4632348.0,
5073524.0,
5294112.0,
5514700.0,
6176464.0,
6617640.0,
7058816.0,
7279404.0,
7499992.0,
7720580.0,
8161756.0,
8602932.0,
8823520.0,
9044108.0,
9705872.0,
10147048.0,
10588224.0,
10808812.0,
11029400.0,
11249988.0,
11691164.0,
12132340.0,
12352928.0,
13235280.0,
13676456.0,
14117632.0,
14999984.0,
15882336.0,
16102924.0,
16323512.0,
16544100.0,
16764688.0,
17647040.0,
18529392.0,
19411744.0,
19632332.0,
19852920.0,
20073508.0,
20294096.0,
21176448.0,
22058800.0,
22941152.0,
23161740.0,
23382328.0,
23602916.0,
23823504.0,
24705856.0,
25147032.0,
25367620.0,
25588208.0,
26470560.0,
26691148.0,
26911736.0,
27132324.0,
27352912.0,
28235264.0,
28455852.0,
28676440.0,
28897028.0,
29338204.0,
29779380.0,
29999968.0,
30220556.0,
30882320.0,
31323496.0,
31764672.0,
31985260.0,
32205848.0,
32426436.0,
32867612.0,
33308788.0,
33529376.0,
33749964.0,
34411728.0,
34852904.0,
35294080.0,
35514668.0,
35735256.0,
35955844.0,
36397020.0,
36838196.0,
37058784.0,
37279372.0,
37941136.0,
38382312.0,
38823488.0,
39044076.0,
39264664.0,
39485252.0,
39926428.0,
40367604.0,
40588192.0,
41470544.0,
41911720.0,
42352896.0,
43235248.0,
44117600.0,
44338188.0,
44558776.0,
44779364.0,
44999952.0,
45882304.0,
46764656.0,
47647008.0,
47867596.0,
48088184.0,
48308772.0,
48529360.0,
49411712.0,
50294064.0,
51176416.0,
51397004.0,
51617592.0,
51838180.0,
52058768.0,
52941120.0,
53382296.0,
53602884.0,
53823472.0,
54705824.0,
54926412.0,
55147000.0,
55367588.0,
55588176.0,
};

int duration1[] = {
220588.0,
220588.0,
220588.0,
441176.0,
441176.0,
220588.0,
220588.0,
661764.0,
441176.0,
441176.0,
220588.0,
220588.0,
220588.0,
441176.0,
441176.0,
220588.0,
220588.0,
661764.0,
441176.0,
441176.0,
220588.0,
220588.0,
220588.0,
441176.0,
441176.0,
220588.0,
220588.0,
661764.0,
441176.0,
441176.0,
220588.0,
220588.0,
220588.0,
441176.0,
441176.0,
220588.0,
882352.0,
441176.0,
441176.0,
882352.0,
882352.0,
220588.0,
220588.0,
220588.0,
220588.0,
882352.0,
882352.0,
882352.0,
220588.0,
220588.0,
220588.0,
220588.0,
882352.0,
882352.0,
882352.0,
220588.0,
220588.0,
220588.0,
220588.0,
882352.0,
441176.0,
220588.0,
220588.0,
882352.0,
220588.0,
220588.0,
220588.0,
220588.0,
882352.0,
220588.0,
220588.0,
220588.0,
441176.0,
441176.0,
220588.0,
220588.0,
661764.0,
441176.0,
441176.0,
220588.0,
220588.0,
220588.0,
441176.0,
441176.0,
220588.0,
220588.0,
661764.0,
441176.0,
441176.0,
220588.0,
220588.0,
220588.0,
441176.0,
441176.0,
220588.0,
220588.0,
661764.0,
441176.0,
441176.0,
220588.0,
220588.0,
220588.0,
441176.0,
441176.0,
220588.0,
882352.0,
441176.0,
441176.0,
882352.0,
882352.0,
220588.0,
220588.0,
220588.0,
220588.0,
882352.0,
882352.0,
882352.0,
220588.0,
220588.0,
220588.0,
220588.0,
882352.0,
882352.0,
882352.0,
220588.0,
220588.0,
220588.0,
220588.0,
882352.0,
441176.0,
220588.0,
220588.0,
882352.0,
220588.0,
220588.0,
220588.0,
220588.0,
882352.0,
};

int melody2[] = {
NOTE_D4,
NOTE_FS4,
NOTE_D4,
NOTE_FS4,
NOTE_D4,
NOTE_FS4,
NOTE_G4,
NOTE_FS4,
NOTE_E4,
NOTE_A4,
NOTE_E4,
NOTE_A4,
NOTE_E4,
NOTE_A4,
NOTE_E4,
NOTE_A4,
NOTE_E4,
NOTE_A4,
NOTE_E4,
NOTE_A4,
NOTE_E4,
NOTE_A4,
NOTE_G4,
NOTE_A4,
NOTE_FS4,
NOTE_A4,
NOTE_FS4,
NOTE_A4,
NOTE_FS4,
NOTE_A4,
NOTE_G4,
NOTE_A4,
NOTE_D4,
NOTE_FS4,
NOTE_D4,
NOTE_FS4,
NOTE_D4,
NOTE_FS4,
NOTE_G4,
NOTE_FS4,
NOTE_E4,
NOTE_A4,
NOTE_E4,
NOTE_A4,
NOTE_E4,
NOTE_A4,
NOTE_E4,
NOTE_A4,
NOTE_E4,
NOTE_A4,
NOTE_E4,
NOTE_A4,
NOTE_E4,
NOTE_A4,
NOTE_G4,
NOTE_A4,
NOTE_D4,
NOTE_FS4,
NOTE_D4,
NOTE_FS4,
NOTE_D4,
NOTE_A4,
NOTE_G4,
NOTE_FS4,
NOTE_FS4,
NOTE_A4,
NOTE_FS4,
NOTE_A4,
NOTE_FS4,
NOTE_A4,
NOTE_FS4,
NOTE_A4,
NOTE_G4,
NOTE_B4,
NOTE_G4,
NOTE_B4,
NOTE_G4,
NOTE_B4,
NOTE_G4,
NOTE_B4,
NOTE_E4,
NOTE_G4,
NOTE_E4,
NOTE_G4,
NOTE_E4,
NOTE_G4,
NOTE_E4,
NOTE_G4,
NOTE_FS4,
NOTE_A4,
NOTE_FS4,
NOTE_A4,
NOTE_FS4,
NOTE_A4,
NOTE_G4,
NOTE_A4,
NOTE_FS4,
NOTE_A4,
NOTE_FS4,
NOTE_A4,
NOTE_FS4,
NOTE_A4,
NOTE_FS4,
NOTE_A4,
NOTE_G4,
NOTE_B4,
NOTE_G4,
NOTE_B4,
NOTE_G4,
NOTE_B4,
NOTE_G4,
NOTE_B4,
NOTE_E4,
NOTE_G4,
NOTE_E4,
NOTE_G4,
NOTE_E4,
NOTE_G4,
NOTE_E4,
NOTE_G4,
NOTE_FS4,
NOTE_A4,
NOTE_FS4,
NOTE_A4,
NOTE_FS4,
NOTE_G4,
NOTE_FS4,
NOTE_E4,
NOTE_D4,
NOTE_FS4,
NOTE_D4,
NOTE_FS4,
NOTE_D4,
NOTE_FS4,
NOTE_G4,
NOTE_FS4,
NOTE_E4,
NOTE_A4,
NOTE_E4,
NOTE_A4,
NOTE_E4,
NOTE_A4,
NOTE_E4,
NOTE_A4,
NOTE_E4,
NOTE_A4,
NOTE_E4,
NOTE_A4,
NOTE_E4,
NOTE_A4,
NOTE_G4,
NOTE_A4,
NOTE_FS4,
NOTE_A4,
NOTE_FS4,
NOTE_A4,
NOTE_FS4,
NOTE_A4,
NOTE_G4,
NOTE_A4,
NOTE_D4,
NOTE_FS4,
NOTE_D4,
NOTE_FS4,
NOTE_D4,
NOTE_FS4,
NOTE_G4,
NOTE_FS4,
NOTE_E4,
NOTE_A4,
NOTE_E4,
NOTE_A4,
NOTE_E4,
NOTE_A4,
NOTE_E4,
NOTE_A4,
NOTE_E4,
NOTE_A4,
NOTE_E4,
NOTE_A4,
NOTE_E4,
NOTE_A4,
NOTE_G4,
NOTE_A4,
NOTE_D4,
NOTE_FS4,
NOTE_D4,
NOTE_FS4,
NOTE_D4,
NOTE_A4,
NOTE_G4,
NOTE_FS4,
NOTE_FS4,
NOTE_A4,
NOTE_FS4,
NOTE_A4,
NOTE_FS4,
NOTE_A4,
NOTE_FS4,
NOTE_A4,
NOTE_G4,
NOTE_B4,
NOTE_G4,
NOTE_B4,
NOTE_G4,
NOTE_B4,
NOTE_G4,
NOTE_B4,
NOTE_E4,
NOTE_G4,
NOTE_E4,
NOTE_G4,
NOTE_E4,
NOTE_G4,
NOTE_E4,
NOTE_G4,
NOTE_FS4,
NOTE_A4,
NOTE_FS4,
NOTE_A4,
NOTE_FS4,
NOTE_A4,
NOTE_G4,
NOTE_A4,
NOTE_FS4,
NOTE_A4,
NOTE_FS4,
NOTE_A4,
NOTE_FS4,
NOTE_A4,
NOTE_FS4,
NOTE_A4,
NOTE_G4,
NOTE_B4,
NOTE_G4,
NOTE_B4,
NOTE_G4,
NOTE_B4,
NOTE_G4,
NOTE_B4,
NOTE_E4,
NOTE_G4,
NOTE_E4,
NOTE_G4,
NOTE_E4,
NOTE_G4,
NOTE_E4,
NOTE_G4,
NOTE_FS4,
NOTE_A4,
NOTE_FS4,
NOTE_A4,
NOTE_FS4,
NOTE_G4,
NOTE_FS4,
NOTE_E4,
};

int start_time2[] = {
0.0,
220588.0,
441176.0,
661764.0,
882352.0,
1102940.0,
1323528.0,
1544116.0,
1764704.0,
1985292.0,
2205880.0,
2426468.0,
2647056.0,
2867644.0,
3088232.0,
3308820.0,
3529408.0,
3749996.0,
3970584.0,
4191172.0,
4411760.0,
4632348.0,
4852936.0,
5073524.0,
5294112.0,
5514700.0,
5735288.0,
5955876.0,
6176464.0,
6397052.0,
6617640.0,
6838228.0,
7058816.0,
7279404.0,
7499992.0,
7720580.0,
7941168.0,
8161756.0,
8382344.0,
8602932.0,
8823520.0,
9044108.0,
9264696.0,
9485284.0,
9705872.0,
9926460.0,
10147048.0,
10367636.0,
10588224.0,
10808812.0,
11029400.0,
11249988.0,
11470576.0,
11691164.0,
11911752.0,
12132340.0,
12352928.0,
12573516.0,
12794104.0,
13014692.0,
13235280.0,
13455868.0,
13676456.0,
13897044.0,
14117632.0,
14338220.0,
14558808.0,
14779396.0,
14999984.0,
15220572.0,
15441160.0,
15661748.0,
15882336.0,
16102924.0,
16323512.0,
16544100.0,
16764688.0,
16985276.0,
17205864.0,
17426452.0,
17647040.0,
17867628.0,
18088216.0,
18308804.0,
18529392.0,
18749980.0,
18970568.0,
19191156.0,
19411744.0,
19632332.0,
19852920.0,
20073508.0,
20294096.0,
20514684.0,
20735272.0,
20955860.0,
21176448.0,
21397036.0,
21617624.0,
21838212.0,
22058800.0,
22279388.0,
22499976.0,
22720564.0,
22941152.0,
23161740.0,
23382328.0,
23602916.0,
23823504.0,
24044092.0,
24264680.0,
24485268.0,
24705856.0,
24926444.0,
25147032.0,
25367620.0,
25588208.0,
25808796.0,
26029384.0,
26249972.0,
26470560.0,
26691148.0,
26911736.0,
27132324.0,
27352912.0,
27573500.0,
27794088.0,
28014676.0,
28235264.0,
28455852.0,
28676440.0,
28897028.0,
29117616.0,
29338204.0,
29558792.0,
29779380.0,
29999968.0,
30220556.0,
30441144.0,
30661732.0,
30882320.0,
31102908.0,
31323496.0,
31544084.0,
31764672.0,
31985260.0,
32205848.0,
32426436.0,
32647024.0,
32867612.0,
33088200.0,
33308788.0,
33529376.0,
33749964.0,
33970552.0,
34191140.0,
34411728.0,
34632316.0,
34852904.0,
35073492.0,
35294080.0,
35514668.0,
35735256.0,
35955844.0,
36176432.0,
36397020.0,
36617608.0,
36838196.0,
37058784.0,
37279372.0,
37499960.0,
37720548.0,
37941136.0,
38161724.0,
38382312.0,
38602900.0,
38823488.0,
39044076.0,
39264664.0,
39485252.0,
39705840.0,
39926428.0,
40147016.0,
40367604.0,
40588192.0,
40808780.0,
41029368.0,
41249956.0,
41470544.0,
41691132.0,
41911720.0,
42132308.0,
42352896.0,
42573484.0,
42794072.0,
43014660.0,
43235248.0,
43455836.0,
43676424.0,
43897012.0,
44117600.0,
44338188.0,
44558776.0,
44779364.0,
44999952.0,
45220540.0,
45441128.0,
45661716.0,
45882304.0,
46102892.0,
46323480.0,
46544068.0,
46764656.0,
46985244.0,
47205832.0,
47426420.0,
47647008.0,
47867596.0,
48088184.0,
48308772.0,
48529360.0,
48749948.0,
48970536.0,
49191124.0,
49411712.0,
49632300.0,
49852888.0,
50073476.0,
50294064.0,
50514652.0,
50735240.0,
50955828.0,
51176416.0,
51397004.0,
51617592.0,
51838180.0,
52058768.0,
52279356.0,
52499944.0,
52720532.0,
52941120.0,
53161708.0,
53382296.0,
53602884.0,
53823472.0,
54044060.0,
54264648.0,
54485236.0,
54705824.0,
54926412.0,
55147000.0,
55367588.0,
55588176.0,
55808764.0,
56029352.0,
56249940.0,
};

int duration2[] = {
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
220588.0,
};



int main_cycle_usec = 10;
int master_time = 0;

int notepin0 = 3;
int notepin2 = 5;
int notepin1 = 25;

int elapsed0 = 0;
int elapsed1 = 0;
int elapsed2 = 0;

int state0 = 0;
int state1 = 0;
int state2 = 0;

void setup() {
  Serial.begin(9600);
  pinMode(13, OUTPUT);
  pinMode(notepin0, OUTPUT);
  pinMode(notepin1, OUTPUT);
  pinMode(notepin2, OUTPUT);

  digitalWrite(13, HIGH);
  delay(500);
  digitalWrite(13, LOW);
  delay(500);
  digitalWrite(13, HIGH);
  delay(500);
  digitalWrite(13, LOW);
  delay(500);
//  tone(3, 40);
//  tone(9, 440);
  
}

float current_time;

int size0 = sizeof(melody0)/sizeof(melody0[0]);
int size1 = sizeof(melody1)/sizeof(melody1[0]);
int size2 = sizeof(melody2)/sizeof(melody2[0]);


void loop() {
  Serial.println(size0);
  Serial.println(size1);
  Serial.println(size2);
  
  int usec2 = 0;//(1000000/freq2)/2;

  int end0 = 0;
  int end1 = 0;
  int end2 = 0;

  int i = -1;
  int j = -1;
  int k = -1;
    
  int note0_active = 0;
  float note0_start = 0;
  float note0_end = micros();
  float wait_time0 = 0;
  
  int note1_active = 0;
  float note1_start = 0;
  float note1_end = micros();
  float wait_time1 = 0;
  
  int note2_active = 0;
  float note2_start = 0;
  float note2_end = micros();
  float wait_time2 = 0;

  float start_time = micros();

  while(1){

    current_time = micros();


    // ### VOICE 0 ### //
        
    if (!note0_active){
      // Check if voice is already done, do nothing if True
      if (end0){
        i;
      }
      // Check if note needs to start
      else if ((current_time - note0_end) >= wait_time0){
        i++;
//        Serial.print("I: ");
//        Serial.println(i);
        note0_active = 1;
        analogWriteFrequency(notepin0, melody0[i]);
        analogWrite(notepin0, 128);
        note0_start = micros();
      }
    }
    else{
      // Check if note needs to end      
      if ((current_time - note0_start) >= duration0[i]){
        note0_active = 0;
        analogWrite(notepin0, 0);

        // Check if already at song end
        if (i+1 == size0){
//          Serial.println("END0");
          end0 = 1;
        }
        else{
          note0_end = micros();
          wait_time0 = start_time0[i+1] - (start_time0[i] + duration0[i]); // consider hardcoding this to reduce cycle time
        }
      }  
    }



    // ### VOICE 1 ### //
    
    if (!note1_active){
      // Check if voice is already done, do nothing if True
      if (end1){
        j;
      }
      // Check if note needs to start
      else if ((current_time - note1_end) >= wait_time1){
        j++;
//        Serial.print("J: ");
//        Serial.println(j);
        note1_active = 1;
        analogWriteFrequency(notepin1, melody1[j]);
        analogWrite(notepin1, 128);
        note1_start = micros();
      }
    }
    else{
      // Check if note needs to end      
      if ((current_time - note1_start) >= duration1[j]){
        note1_active = 0;
        analogWrite(notepin1, 0);

        // Check if already at song end
        if (j+1 == size1){
//          Serial.println("END1");
          end1 = 1;
        }
        else{
          note1_end = micros();
          wait_time1 = start_time1[j+1] - (start_time1[j] + duration1[j]); // consider hardcoding this to reduce cycle time
        }
      }
    }


    // ### VOICE 2 ### //

    if (!note2_active){
      // Check if voice is already done, do nothing if True
      if (end2){
        k;
      }
      // Check if note needs to start
      else if ((current_time - note2_end) >= wait_time2){
        k++;
//        Serial.print("k: ");
//        Serial.println(k);
        note2_active = 1;
        analogWriteFrequency(notepin2, melody2[k]);
        analogWrite(notepin2, 128);
        note2_start = micros();
      }
    }
    else{
      // Check if note needs to end      
      if ((current_time - note2_start) >= duration2[k]){
        note2_active = 0;
        analogWrite(notepin2, 0);

        // Check if already at song end
        if (k+1 == size2){
//          Serial.println("END2");
          end2 = 1;
        }
        else{
          note2_end = micros();
          wait_time2 = start_time2[k+1] - (start_time2[k] + duration2[k]); // consider hardcoding this to reduce cycle time
        }
      }
    }
//
//    if (!note2_active){
//      // Check if voice is already done, do nothing if True
//      if (end2){
//        k;
//      }
//      // Check if note needs to start
//      else if ((current_time - note2_end) >= wait_time2){
//        k++;
////        Serial.print("K: ");
////        Serial.println(k);
//        note2_active = 1;
//        digitalWrite(notepin2, HIGH);
//        elapsed2 = 0;
//        note2_start = micros();
//        usec2 = (1000000/melody2[k])/2;
//      }
//    }
//    else{
//      // Check if note needs to end      
//      if ((current_time - note2_start) >= duration2[k]){
//        note2_active = 0;
//        digitalWrite(notepin2, LOW);
//
//        // Check if already at song end
//        if (k+1 == size2){
////          Serial.println("END2");
//          end2 = 1;
//        }
//        else{
//          note2_end = micros();
//          wait_time2 = start_time2[k+1] - (start_time2[k] + duration2[k]); // consider hardcoding this to reduce cycle time
//        }
//      }

//      // If didn't end, check proper note state and set if needed
//      if (elapsed2 > usec2){
//        state2 = !state2;
//        digitalWrite(notepin2, state2);
//        elapsed2 = 0;
//      }      
//    }

    // If all voices are finished, break out of while loop and play song again
    if (end0 & end1 & end2){
      break;
    }

//    elapsed2 += main_cycle_usec;
    delayMicroseconds(main_cycle_usec);
  }

  digitalWrite(13, HIGH);
  delay(500);
  digitalWrite(13, LOW);
  delay(500);
  digitalWrite(13, HIGH);
  delay(500);
  digitalWrite(13, LOW);
  delay(500);
}
