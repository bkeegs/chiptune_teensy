#include <pitches.h>

int melody0[] = {
NOTE_B3,
NOTE_CS4,
NOTE_D4,
NOTE_E4,
NOTE_FS4,
NOTE_GS4,
NOTE_A4,
NOTE_B4,
NOTE_CS5,
NOTE_B4,
NOTE_CS5,
NOTE_A4,
NOTE_GS4,
NOTE_A4,
NOTE_B4,
NOTE_A4,
NOTE_GS4,
NOTE_B4,
NOTE_CS5,
NOTE_A4,
NOTE_GS4,
NOTE_A4,
NOTE_FS4,
NOTE_E4,
NOTE_FS4,
NOTE_GS4,
NOTE_FS4,
NOTE_E4,
NOTE_A4,
NOTE_E4,
NOTE_A4,
NOTE_D5,
NOTE_CS5,
NOTE_A4,
NOTE_CS5,
NOTE_E5,
NOTE_D5,
NOTE_CS5,
NOTE_B4,
NOTE_A4,
NOTE_GS4,
NOTE_E4,
NOTE_FS4,
NOTE_GS4,
NOTE_CS5,
NOTE_B4,
NOTE_CS5,
NOTE_A4,
NOTE_GS4,
NOTE_A4,
NOTE_B4,
NOTE_A4,
NOTE_GS4,
NOTE_B4,
NOTE_CS5,
NOTE_A4,
NOTE_GS4,
NOTE_A4,
NOTE_FS4,
NOTE_E4,
NOTE_FS4,
NOTE_GS4,
NOTE_FS4,
NOTE_E4,
NOTE_A4,
NOTE_E4,
NOTE_A4,
NOTE_D5,
NOTE_CS5,
NOTE_A4,
NOTE_CS5,
NOTE_E5,
NOTE_D5,
NOTE_CS5,
NOTE_B4,
NOTE_A4,
NOTE_GS4,
NOTE_E4,
NOTE_FS4,
NOTE_GS4,
NOTE_CS5,
NOTE_B4,
NOTE_CS5,
NOTE_A4,
NOTE_GS4,
NOTE_A4,
NOTE_B4,
NOTE_A4,
NOTE_GS4,
NOTE_B4,
NOTE_CS5,
NOTE_A4,
NOTE_GS4,
NOTE_A4,
NOTE_FS4,
NOTE_E4,
NOTE_FS4,
NOTE_GS4,
NOTE_FS4,
NOTE_E4,
NOTE_A4,
NOTE_E4,
NOTE_A4,
NOTE_D5,
NOTE_CS5,
NOTE_A4,
NOTE_CS5,
NOTE_E5,
NOTE_D5,
NOTE_CS5,
NOTE_B4,
NOTE_A4,
NOTE_GS4,
NOTE_E4,
NOTE_FS4,
NOTE_GS4,
NOTE_CS5,
NOTE_B4,
NOTE_CS5,
NOTE_A4,
NOTE_GS4,
NOTE_A4,
NOTE_B4,
NOTE_A4,
NOTE_GS4,
NOTE_B4,
NOTE_CS5,
NOTE_A4,
NOTE_GS4,
NOTE_A4,
NOTE_FS4,
NOTE_E4,
NOTE_FS4,
NOTE_GS4,
NOTE_FS4,
NOTE_E4,
NOTE_A4,
NOTE_E4,
NOTE_A4,
NOTE_D5,
NOTE_CS5,
NOTE_A4,
NOTE_CS5,
NOTE_E5,
NOTE_D5,
NOTE_CS5,
NOTE_B4,
NOTE_A4,
NOTE_GS4,
NOTE_E4,
NOTE_FS4,
NOTE_GS4,
};

int start_time0[] = {
0.0,
109489.0,
218978.0,
328467.0,
437956.0,
547445.0,
656934.0,
766423.0,
875912.0,
1313868.0,
1532846.0,
1751824.0,
2189780.0,
2408758.0,
2627736.0,
3065692.0,
3722626.0,
3832115.0,
3941604.0,
4379560.0,
4817516.0,
5036494.0,
5255472.0,
5693428.0,
5912406.0,
6131384.0,
6569340.0,
7445252.0,
7883208.0,
8540142.0,
8649631.0,
8759120.0,
9635032.0,
10291966.0,
10401455.0,
10510944.0,
11386856.0,
11824812.0,
12262768.0,
12700724.0,
13138680.0,
13576636.0,
14014592.0,
14452548.0,
14890504.0,
15328460.0,
15547438.0,
15766416.0,
16204372.0,
16423350.0,
16642328.0,
17080284.0,
17737218.0,
17846707.0,
17956196.0,
18394152.0,
18832108.0,
19051086.0,
19270064.0,
19708020.0,
19926998.0,
20145976.0,
20583932.0,
21459844.0,
21897800.0,
22554734.0,
22664223.0,
22773712.0,
23649624.0,
24306558.0,
24416047.0,
24525536.0,
25401448.0,
25839404.0,
26277360.0,
26715316.0,
27153272.0,
27591228.0,
28029184.0,
28467140.0,
28905096.0,
29343052.0,
29562030.0,
29781008.0,
30218964.0,
30437942.0,
30656920.0,
31094876.0,
31751810.0,
31861299.0,
31970788.0,
32408744.0,
32846700.0,
33065678.0,
33284656.0,
33722612.0,
33941590.0,
34160568.0,
34598524.0,
35474436.0,
35912392.0,
36569326.0,
36678815.0,
36788304.0,
37664216.0,
38321150.0,
38430639.0,
38540128.0,
39416040.0,
39853996.0,
40291952.0,
40729908.0,
41167864.0,
41605820.0,
42043776.0,
42481732.0,
42919688.0,
43357644.0,
43576622.0,
43795600.0,
44233556.0,
44452534.0,
44671512.0,
45109468.0,
45766402.0,
45875891.0,
45985380.0,
46423336.0,
46861292.0,
47080270.0,
47299248.0,
47737204.0,
47956182.0,
48175160.0,
48613116.0,
49489028.0,
49926984.0,
50583918.0,
50693407.0,
50802896.0,
51678808.0,
52335742.0,
52445231.0,
52554720.0,
53430632.0,
53868588.0,
54306544.0,
54744500.0,
55182456.0,
55620412.0,
56058368.0,
56496324.0,
};

int duration0[] = {
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
437956.0,
218978.0,
218978.0,
437956.0,
218978.0,
218978.0,
109489.0,
656934.0,
109489.0,
109489.0,
437956.0,
437956.0,
218978.0,
218978.0,
437956.0,
218978.0,
218978.0,
109489.0,
875912.0,
437956.0,
656934.0,
109489.0,
109489.0,
875912.0,
656934.0,
109489.0,
109489.0,
875912.0,
437956.0,
437956.0,
437956.0,
437956.0,
109489.0,
437956.0,
437956.0,
437956.0,
437956.0,
218978.0,
218978.0,
437956.0,
218978.0,
218978.0,
109489.0,
656934.0,
109489.0,
109489.0,
437956.0,
437956.0,
218978.0,
218978.0,
437956.0,
218978.0,
218978.0,
109489.0,
875912.0,
437956.0,
656934.0,
109489.0,
109489.0,
875912.0,
656934.0,
109489.0,
109489.0,
875912.0,
437956.0,
437956.0,
437956.0,
437956.0,
109489.0,
437956.0,
437956.0,
437956.0,
437956.0,
218978.0,
218978.0,
437956.0,
218978.0,
218978.0,
109489.0,
656934.0,
109489.0,
109489.0,
437956.0,
437956.0,
218978.0,
218978.0,
437956.0,
218978.0,
218978.0,
109489.0,
875912.0,
437956.0,
656934.0,
109489.0,
109489.0,
875912.0,
656934.0,
109489.0,
109489.0,
875912.0,
437956.0,
437956.0,
437956.0,
437956.0,
109489.0,
437956.0,
437956.0,
437956.0,
437956.0,
218978.0,
218978.0,
437956.0,
218978.0,
218978.0,
109489.0,
656934.0,
109489.0,
109489.0,
437956.0,
437956.0,
218978.0,
218978.0,
437956.0,
218978.0,
218978.0,
109489.0,
875912.0,
437956.0,
656934.0,
109489.0,
109489.0,
875912.0,
656934.0,
109489.0,
109489.0,
875912.0,
437956.0,
437956.0,
437956.0,
437956.0,
109489.0,
437956.0,
437956.0,
437956.0,
};

int melody1[] = {
NOTE_GS4,
NOTE_A4,
NOTE_B4,
NOTE_CS5,
NOTE_D5,
NOTE_E5,
NOTE_FS5,
NOTE_GS5,
NOTE_A5,
NOTE_GS5,
NOTE_FS5,
NOTE_E5,
NOTE_DS5,
NOTE_E5,
NOTE_FS5,
NOTE_E5,
NOTE_E5,
NOTE_FS5,
NOTE_E5,
NOTE_D5,
NOTE_CS5,
NOTE_B4,
NOTE_CS5,
NOTE_D5,
NOTE_CS5,
NOTE_CS5,
NOTE_D5,
NOTE_A4,
NOTE_D5,
NOTE_FS5,
NOTE_E5,
NOTE_CS5,
NOTE_E5,
NOTE_A5,
NOTE_GS5,
NOTE_A5,
NOTE_GS5,
NOTE_FS5,
NOTE_GS5,
NOTE_FS5,
NOTE_E5,
NOTE_GS4,
NOTE_A4,
NOTE_B4,
NOTE_CS5,
NOTE_D5,
NOTE_E5,
NOTE_FS5,
NOTE_A5,
NOTE_GS5,
NOTE_FS5,
NOTE_E5,
NOTE_DS5,
NOTE_E5,
NOTE_FS5,
NOTE_E5,
NOTE_E5,
NOTE_FS5,
NOTE_E5,
NOTE_D5,
NOTE_CS5,
NOTE_B4,
NOTE_CS5,
NOTE_D5,
NOTE_CS5,
NOTE_CS5,
NOTE_D5,
NOTE_A4,
NOTE_D5,
NOTE_FS5,
NOTE_E5,
NOTE_CS5,
NOTE_E5,
NOTE_A5,
NOTE_GS5,
NOTE_A5,
NOTE_GS5,
NOTE_FS5,
NOTE_GS5,
NOTE_FS5,
NOTE_E5,
NOTE_GS4,
NOTE_A4,
NOTE_B4,
NOTE_CS5,
NOTE_D5,
NOTE_E5,
NOTE_FS5,
NOTE_A5,
NOTE_GS5,
NOTE_GS5,
NOTE_FS5,
NOTE_E5,
NOTE_DS5,
NOTE_E5,
NOTE_FS5,
NOTE_E5,
NOTE_E5,
NOTE_FS5,
NOTE_E5,
NOTE_D5,
NOTE_CS5,
NOTE_B4,
NOTE_CS5,
NOTE_D5,
NOTE_CS5,
NOTE_CS5,
NOTE_D5,
NOTE_A4,
NOTE_D5,
NOTE_FS5,
NOTE_E5,
NOTE_CS5,
NOTE_E5,
NOTE_A5,
NOTE_GS5,
NOTE_A5,
NOTE_GS5,
NOTE_FS5,
NOTE_GS5,
NOTE_FS5,
NOTE_E5,
NOTE_GS4,
NOTE_A4,
NOTE_B4,
NOTE_CS5,
NOTE_D5,
NOTE_E5,
NOTE_FS5,
NOTE_A5,
NOTE_GS5,
NOTE_GS5,
NOTE_FS5,
NOTE_E5,
NOTE_DS5,
NOTE_E5,
NOTE_FS5,
NOTE_E5,
NOTE_E5,
NOTE_FS5,
NOTE_E5,
NOTE_D5,
NOTE_CS5,
NOTE_B4,
NOTE_CS5,
NOTE_D5,
NOTE_CS5,
NOTE_CS5,
NOTE_D5,
NOTE_A4,
NOTE_D5,
NOTE_FS5,
NOTE_E5,
NOTE_CS5,
NOTE_E5,
NOTE_A5,
NOTE_GS5,
NOTE_A5,
NOTE_GS5,
NOTE_FS5,
NOTE_GS5,
NOTE_FS5,
NOTE_E5,
NOTE_GS4,
NOTE_A4,
NOTE_B4,
NOTE_CS5,
NOTE_D5,
NOTE_E5,
NOTE_FS5,
};

int start_time1[] = {
0.0,
109489.0,
218978.0,
328467.0,
437956.0,
547445.0,
656934.0,
766423.0,
875912.0,
1532846.0,
1642335.0,
1751824.0,
2408758.0,
2518247.0,
2627736.0,
3065692.0,
3941604.0,
4379560.0,
5036494.0,
5145983.0,
5255472.0,
5912406.0,
6021895.0,
6131384.0,
6569340.0,
7445252.0,
7883208.0,
8540142.0,
8649631.0,
8759120.0,
9635032.0,
10291966.0,
10401455.0,
10510944.0,
11386856.0,
11824812.0,
12043790.0,
12262768.0,
12700724.0,
12919702.0,
13138680.0,
13357658.0,
13576636.0,
13795614.0,
14014592.0,
14233570.0,
14452548.0,
14671526.0,
14890504.0,
15547438.0,
15656927.0,
15766416.0,
16423350.0,
16532839.0,
16642328.0,
17080284.0,
17956196.0,
18394152.0,
19051086.0,
19160575.0,
19270064.0,
19926998.0,
20036487.0,
20145976.0,
20583932.0,
21459844.0,
21897800.0,
22554734.0,
22664223.0,
22773712.0,
23649624.0,
24306558.0,
24416047.0,
24525536.0,
25401448.0,
25839404.0,
26058382.0,
26277360.0,
26715316.0,
26934294.0,
27153272.0,
27372250.0,
27591228.0,
27810206.0,
28029184.0,
28248162.0,
28467140.0,
28686118.0,
28905096.0,
29562030.0,
29562030.0,
29671519.0,
29781008.0,
30437942.0,
30547431.0,
30656920.0,
31094876.0,
31970788.0,
32408744.0,
33065678.0,
33175167.0,
33284656.0,
33941590.0,
34051079.0,
34160568.0,
34598524.0,
35474436.0,
35912392.0,
36569326.0,
36678815.0,
36788304.0,
37664216.0,
38321150.0,
38430639.0,
38540128.0,
39416040.0,
39853996.0,
40072974.0,
40291952.0,
40729908.0,
40948886.0,
41167864.0,
41386842.0,
41605820.0,
41824798.0,
42043776.0,
42262754.0,
42481732.0,
42700710.0,
42919688.0,
43576622.0,
43576622.0,
43686111.0,
43795600.0,
44452534.0,
44562023.0,
44671512.0,
45109468.0,
45985380.0,
46423336.0,
47080270.0,
47189759.0,
47299248.0,
47956182.0,
48065671.0,
48175160.0,
48613116.0,
49489028.0,
49926984.0,
50583918.0,
50693407.0,
50802896.0,
51678808.0,
52335742.0,
52445231.0,
52554720.0,
53430632.0,
53868588.0,
54087566.0,
54306544.0,
54744500.0,
54963478.0,
55182456.0,
55401434.0,
55620412.0,
55839390.0,
56058368.0,
56277346.0,
56496324.0,
56715302.0,
};

int duration1[] = {
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
656934.0,
109489.0,
109489.0,
656934.0,
109489.0,
109489.0,
109489.0,
875912.0,
437956.0,
656934.0,
109489.0,
109489.0,
656934.0,
109489.0,
109489.0,
109489.0,
875912.0,
437956.0,
656934.0,
109489.0,
109489.0,
875912.0,
656934.0,
109489.0,
109489.0,
875912.0,
437956.0,
218978.0,
218978.0,
437956.0,
218978.0,
218978.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
656934.0,
109489.0,
109489.0,
656934.0,
109489.0,
109489.0,
109489.0,
875912.0,
437956.0,
656934.0,
109489.0,
109489.0,
656934.0,
109489.0,
109489.0,
109489.0,
875912.0,
437956.0,
656934.0,
109489.0,
109489.0,
875912.0,
656934.0,
109489.0,
109489.0,
875912.0,
437956.0,
218978.0,
218978.0,
437956.0,
218978.0,
218978.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
656934.0,
0.0,
109489.0,
109489.0,
656934.0,
109489.0,
109489.0,
109489.0,
875912.0,
437956.0,
656934.0,
109489.0,
109489.0,
656934.0,
109489.0,
109489.0,
109489.0,
875912.0,
437956.0,
656934.0,
109489.0,
109489.0,
875912.0,
656934.0,
109489.0,
109489.0,
875912.0,
437956.0,
218978.0,
218978.0,
437956.0,
218978.0,
218978.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
656934.0,
0.0,
109489.0,
109489.0,
656934.0,
109489.0,
109489.0,
109489.0,
875912.0,
437956.0,
656934.0,
109489.0,
109489.0,
656934.0,
109489.0,
109489.0,
109489.0,
875912.0,
437956.0,
656934.0,
109489.0,
109489.0,
875912.0,
656934.0,
109489.0,
109489.0,
875912.0,
437956.0,
218978.0,
218978.0,
437956.0,
218978.0,
218978.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
};

int melody2[] = {
NOTE_GS4,
NOTE_FS4,
NOTE_E4,
NOTE_CS4,
NOTE_A4,
NOTE_A4,
NOTE_A4,
NOTE_E4,
NOTE_A4,
NOTE_CS4,
NOTE_A4,
NOTE_A4,
NOTE_A4,
NOTE_E4,
NOTE_A4,
NOTE_A3,
NOTE_FS4,
NOTE_FS4,
NOTE_FS4,
NOTE_CS4,
NOTE_FS4,
NOTE_A3,
NOTE_FS4,
NOTE_FS4,
NOTE_FS4,
NOTE_CS4,
NOTE_FS4,
NOTE_D4,
NOTE_FS4,
NOTE_FS4,
NOTE_FS4,
NOTE_D4,
NOTE_FS4,
NOTE_E4,
NOTE_A4,
NOTE_A4,
NOTE_A4,
NOTE_E4,
NOTE_A4,
NOTE_B3,
NOTE_GS4,
NOTE_GS4,
NOTE_D4,
NOTE_FS4,
NOTE_FS4,
NOTE_E4,
NOTE_GS4,
NOTE_FS4,
NOTE_E4,
NOTE_CS4,
NOTE_A4,
NOTE_CS4,
NOTE_A4,
NOTE_CS4,
NOTE_A4,
NOTE_E4,
NOTE_A4,
NOTE_CS4,
NOTE_A4,
NOTE_CS4,
NOTE_A4,
NOTE_CS4,
NOTE_A4,
NOTE_CS4,
NOTE_A4,
NOTE_A3,
NOTE_FS4,
NOTE_A3,
NOTE_FS4,
NOTE_A3,
NOTE_FS4,
NOTE_CS4,
NOTE_FS4,
NOTE_A3,
NOTE_FS4,
NOTE_A3,
NOTE_FS4,
NOTE_A3,
NOTE_FS4,
NOTE_CS4,
NOTE_FS4,
NOTE_D4,
NOTE_FS4,
NOTE_D4,
NOTE_FS4,
NOTE_D4,
NOTE_FS4,
NOTE_D4,
NOTE_FS4,
NOTE_E4,
NOTE_A4,
NOTE_E4,
NOTE_A4,
NOTE_E4,
NOTE_A4,
NOTE_E4,
NOTE_A4,
NOTE_B3,
NOTE_GS4,
NOTE_B3,
NOTE_GS4,
NOTE_D4,
NOTE_FS4,
NOTE_D4,
NOTE_FS4,
NOTE_E4,
NOTE_GS4,
NOTE_FS4,
NOTE_E4,
NOTE_CS4,
NOTE_A4,
NOTE_A4,
NOTE_A4,
NOTE_E4,
NOTE_A4,
NOTE_CS4,
NOTE_A4,
NOTE_A4,
NOTE_A4,
NOTE_E4,
NOTE_A4,
NOTE_A3,
NOTE_FS4,
NOTE_FS4,
NOTE_FS4,
NOTE_CS4,
NOTE_FS4,
NOTE_A3,
NOTE_FS4,
NOTE_FS4,
NOTE_FS4,
NOTE_CS4,
NOTE_FS4,
NOTE_D4,
NOTE_FS4,
NOTE_FS4,
NOTE_FS4,
NOTE_D4,
NOTE_FS4,
NOTE_E4,
NOTE_A4,
NOTE_A4,
NOTE_A4,
NOTE_E4,
NOTE_A4,
NOTE_B3,
NOTE_GS4,
NOTE_GS4,
NOTE_D4,
NOTE_FS4,
NOTE_FS4,
NOTE_E4,
NOTE_GS4,
NOTE_FS4,
NOTE_E4,
NOTE_CS4,
NOTE_A4,
NOTE_CS4,
NOTE_A4,
NOTE_CS4,
NOTE_A4,
NOTE_E4,
NOTE_A4,
NOTE_CS4,
NOTE_A4,
NOTE_CS4,
NOTE_A4,
NOTE_CS4,
NOTE_A4,
NOTE_CS4,
NOTE_A4,
NOTE_A3,
NOTE_FS4,
NOTE_A3,
NOTE_FS4,
NOTE_A3,
NOTE_FS4,
NOTE_CS4,
NOTE_FS4,
NOTE_A3,
NOTE_FS4,
NOTE_A3,
NOTE_FS4,
NOTE_A3,
NOTE_FS4,
NOTE_CS4,
NOTE_FS4,
NOTE_D4,
NOTE_FS4,
NOTE_D4,
NOTE_FS4,
NOTE_D4,
NOTE_FS4,
NOTE_D4,
NOTE_FS4,
NOTE_E4,
NOTE_A4,
NOTE_E4,
NOTE_A4,
NOTE_E4,
NOTE_A4,
NOTE_E4,
NOTE_A4,
NOTE_B3,
NOTE_GS4,
NOTE_B3,
NOTE_GS4,
NOTE_D4,
NOTE_FS4,
NOTE_D4,
NOTE_FS4,
NOTE_E4,
NOTE_GS4,
NOTE_FS4,
NOTE_E4,
};

int start_time2[] = {
218978.0,
437956.0,
656934.0,
875912.0,
1094890.0,
1532846.0,
1970802.0,
2189780.0,
2408758.0,
2627736.0,
2846714.0,
3284670.0,
3722626.0,
3941604.0,
4160582.0,
4379560.0,
4598538.0,
5036494.0,
5474450.0,
5693428.0,
5912406.0,
6131384.0,
6350362.0,
6788318.0,
7226274.0,
7445252.0,
7664230.0,
7883208.0,
8102186.0,
8540142.0,
8978098.0,
9197076.0,
9416054.0,
9635032.0,
9854010.0,
10291966.0,
10729922.0,
10948900.0,
11167878.0,
11386856.0,
11605834.0,
12043790.0,
12262768.0,
12481746.0,
12919702.0,
13138680.0,
13795614.0,
14233570.0,
14671526.0,
14890504.0,
15109482.0,
15328460.0,
15547438.0,
15766416.0,
15985394.0,
16204372.0,
16423350.0,
16642328.0,
16861306.0,
17080284.0,
17299262.0,
17518240.0,
17737218.0,
17956196.0,
18175174.0,
18394152.0,
18613130.0,
18832108.0,
19051086.0,
19270064.0,
19489042.0,
19708020.0,
19926998.0,
20145976.0,
20364954.0,
20583932.0,
20802910.0,
21021888.0,
21240866.0,
21459844.0,
21678822.0,
21897800.0,
22116778.0,
22335756.0,
22554734.0,
22773712.0,
22992690.0,
23211668.0,
23430646.0,
23649624.0,
23868602.0,
24087580.0,
24306558.0,
24525536.0,
24744514.0,
24963492.0,
25182470.0,
25401448.0,
25620426.0,
25839404.0,
26058382.0,
26277360.0,
26496338.0,
26715316.0,
26934294.0,
27153272.0,
27591228.0,
28029184.0,
28467140.0,
28905096.0,
29124074.0,
29562030.0,
29999986.0,
30218964.0,
30437942.0,
30656920.0,
30875898.0,
31313854.0,
31751810.0,
31970788.0,
32189766.0,
32408744.0,
32627722.0,
33065678.0,
33503634.0,
33722612.0,
33941590.0,
34160568.0,
34379546.0,
34817502.0,
35255458.0,
35474436.0,
35693414.0,
35912392.0,
36131370.0,
36569326.0,
37007282.0,
37226260.0,
37445238.0,
37664216.0,
37883194.0,
38321150.0,
38759106.0,
38978084.0,
39197062.0,
39416040.0,
39635018.0,
40072974.0,
40291952.0,
40510930.0,
40948886.0,
41167864.0,
41824798.0,
42262754.0,
42700710.0,
42919688.0,
43138666.0,
43357644.0,
43576622.0,
43795600.0,
44014578.0,
44233556.0,
44452534.0,
44671512.0,
44890490.0,
45109468.0,
45328446.0,
45547424.0,
45766402.0,
45985380.0,
46204358.0,
46423336.0,
46642314.0,
46861292.0,
47080270.0,
47299248.0,
47518226.0,
47737204.0,
47956182.0,
48175160.0,
48394138.0,
48613116.0,
48832094.0,
49051072.0,
49270050.0,
49489028.0,
49708006.0,
49926984.0,
50145962.0,
50364940.0,
50583918.0,
50802896.0,
51021874.0,
51240852.0,
51459830.0,
51678808.0,
51897786.0,
52116764.0,
52335742.0,
52554720.0,
52773698.0,
52992676.0,
53211654.0,
53430632.0,
53649610.0,
53868588.0,
54087566.0,
54306544.0,
54525522.0,
54744500.0,
54963478.0,
55182456.0,
55620412.0,
56058368.0,
56496324.0,
};

int duration2[] = {
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
109489.0,
};



int main_cycle_usec = 10;
int master_time = 0;

int notepin0 = 3;
int notepin2 = 5;
int notepin1 = 25;

int elapsed0 = 0;
int elapsed1 = 0;
int elapsed2 = 0;

int state0 = 0;
int state1 = 0;
int state2 = 0;

void setup() {
  Serial.begin(9600);
  pinMode(13, OUTPUT);
  pinMode(notepin0, OUTPUT);
  pinMode(notepin1, OUTPUT);
  pinMode(notepin2, OUTPUT);

  digitalWrite(13, HIGH);
  delay(500);
  digitalWrite(13, LOW);
  delay(500);
  digitalWrite(13, HIGH);
  delay(500);
  digitalWrite(13, LOW);
  delay(500);
//  tone(3, 40);
//  tone(9, 440);
  
}

float current_time;

int size0 = sizeof(melody0)/sizeof(melody0[0]);
int size1 = sizeof(melody1)/sizeof(melody1[0]);
int size2 = sizeof(melody2)/sizeof(melody2[0]);


void loop() {
  Serial.println(size0);
  Serial.println(size1);
  Serial.println(size2);
  
  int usec2 = 0;//(1000000/freq2)/2;

  int end0 = 0;
  int end1 = 0;
  int end2 = 0;

  int i = -1;
  int j = -1;
  int k = -1;
    
  int note0_active = 0;
  float note0_start = 0;
  float note0_end = micros();
  float wait_time0 = 0;
  
  int note1_active = 0;
  float note1_start = 0;
  float note1_end = micros();
  float wait_time1 = 0;
  
  int note2_active = 0;
  float note2_start = 0;
  float note2_end = micros();
  float wait_time2 = 0;

  float start_time = micros();

  while(1){

    current_time = micros();


    // ### VOICE 0 ### //
        
    if (!note0_active){
      // Check if voice is already done, do nothing if True
      if (end0){
        i;
      }
      // Check if note needs to start
      else if ((current_time - note0_end) >= wait_time0){
        i++;
//        Serial.print("I: ");
//        Serial.println(i);
        note0_active = 1;
        analogWriteFrequency(notepin0, melody0[i]);
        analogWrite(notepin0, 128);
        note0_start = micros();
      }
    }
    else{
      // Check if note needs to end      
      if ((current_time - note0_start) >= duration0[i]){
        note0_active = 0;
        analogWrite(notepin0, 0);

        // Check if already at song end
        if (i+1 == size0){
//          Serial.println("END0");
          end0 = 1;
        }
        else{
          note0_end = micros();
          wait_time0 = start_time0[i+1] - (start_time0[i] + duration0[i]); // consider hardcoding this to reduce cycle time
        }
      }  
    }



    // ### VOICE 1 ### //
    
    if (!note1_active){
      // Check if voice is already done, do nothing if True
      if (end1){
        j;
      }
      // Check if note needs to start
      else if ((current_time - note1_end) >= wait_time1){
        j++;
//        Serial.print("J: ");
//        Serial.println(j);
        note1_active = 1;
        analogWriteFrequency(notepin1, melody1[j]);
        analogWrite(notepin1, 128);
        note1_start = micros();
      }
    }
    else{
      // Check if note needs to end      
      if ((current_time - note1_start) >= duration1[j]){
        note1_active = 0;
        analogWrite(notepin1, 0);

        // Check if already at song end
        if (j+1 == size1){
//          Serial.println("END1");
          end1 = 1;
        }
        else{
          note1_end = micros();
          wait_time1 = start_time1[j+1] - (start_time1[j] + duration1[j]); // consider hardcoding this to reduce cycle time
        }
      }
    }


    // ### VOICE 2 ### //

    if (!note2_active){
      // Check if voice is already done, do nothing if True
      if (end2){
        k;
      }
      // Check if note needs to start
      else if ((current_time - note2_end) >= wait_time2){
        k++;
//        Serial.print("k: ");
//        Serial.println(k);
        note2_active = 1;
        analogWriteFrequency(notepin2, melody2[k]);
        analogWrite(notepin2, 128);
        note2_start = micros();
      }
    }
    else{
      // Check if note needs to end      
      if ((current_time - note2_start) >= duration2[k]){
        note2_active = 0;
        analogWrite(notepin2, 0);

        // Check if already at song end
        if (k+1 == size2){
//          Serial.println("END2");
          end2 = 1;
        }
        else{
          note2_end = micros();
          wait_time2 = start_time2[k+1] - (start_time2[k] + duration2[k]); // consider hardcoding this to reduce cycle time
        }
      }
    }
//
//    if (!note2_active){
//      // Check if voice is already done, do nothing if True
//      if (end2){
//        k;
//      }
//      // Check if note needs to start
//      else if ((current_time - note2_end) >= wait_time2){
//        k++;
////        Serial.print("K: ");
////        Serial.println(k);
//        note2_active = 1;
//        digitalWrite(notepin2, HIGH);
//        elapsed2 = 0;
//        note2_start = micros();
//        usec2 = (1000000/melody2[k])/2;
//      }
//    }
//    else{
//      // Check if note needs to end      
//      if ((current_time - note2_start) >= duration2[k]){
//        note2_active = 0;
//        digitalWrite(notepin2, LOW);
//
//        // Check if already at song end
//        if (k+1 == size2){
////          Serial.println("END2");
//          end2 = 1;
//        }
//        else{
//          note2_end = micros();
//          wait_time2 = start_time2[k+1] - (start_time2[k] + duration2[k]); // consider hardcoding this to reduce cycle time
//        }
//      }

//      // If didn't end, check proper note state and set if needed
//      if (elapsed2 > usec2){
//        state2 = !state2;
//        digitalWrite(notepin2, state2);
//        elapsed2 = 0;
//      }      
//    }

    // If all voices are finished, break out of while loop and play song again
    if (end0 & end1 & end2){
      break;
    }

//    elapsed2 += main_cycle_usec;
    delayMicroseconds(main_cycle_usec);
  }

  digitalWrite(13, HIGH);
  delay(500);
  digitalWrite(13, LOW);
  delay(500);
  digitalWrite(13, HIGH);
  delay(500);
  digitalWrite(13, LOW);
  delay(500);
}
