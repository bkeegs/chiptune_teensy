#include <pitches.h>

int melody0[] = {
NOTE_B4,
NOTE_C5,
NOTE_D5,
NOTE_G5,
NOTE_D5,
NOTE_C5,
NOTE_B4,
NOTE_G4,
NOTE_D5,
NOTE_D5,
NOTE_C5,
NOTE_B4,
NOTE_B4,
NOTE_C5,
NOTE_B4,
NOTE_C5,
NOTE_B4,
NOTE_C5,
NOTE_A4,
NOTE_B4,
NOTE_G4,
NOTE_A4,
NOTE_FS4,
NOTE_B4,
NOTE_C5,
NOTE_D5,
NOTE_G5,
NOTE_D5,
NOTE_C5,
NOTE_B4,
NOTE_G4,
NOTE_D5,
NOTE_G5,
NOTE_FS5,
NOTE_E5,
NOTE_D5,
NOTE_C5,
NOTE_B4,
NOTE_A4,
NOTE_B4,
NOTE_C5,
NOTE_D5,
NOTE_C5,
NOTE_B4,
NOTE_A4,
NOTE_G4,
NOTE_FS4,
NOTE_C5,
NOTE_G4,
NOTE_E4,
NOTE_G4,
NOTE_D5,
NOTE_A4,
NOTE_FS4,
NOTE_A4,
NOTE_B4,
NOTE_G4,
NOTE_D4,
NOTE_G4,
NOTE_B4,
NOTE_G4,
NOTE_D4,
NOTE_G4,
NOTE_C5,
NOTE_G4,
NOTE_E4,
NOTE_G4,
NOTE_D5,
NOTE_A4,
NOTE_FS4,
NOTE_A4,
NOTE_B4,
NOTE_G4,
NOTE_D4,
NOTE_G4,
NOTE_B4,
NOTE_G4,
NOTE_D4,
NOTE_G4,
NOTE_A4,
NOTE_E4,
NOTE_C4,
NOTE_E4,
NOTE_A4,
NOTE_E4,
NOTE_C4,
NOTE_E4,
NOTE_A4,
NOTE_E4,
NOTE_C4,
NOTE_E4,
NOTE_A4,
NOTE_E4,
NOTE_C4,
NOTE_E4,
NOTE_FS4,
NOTE_D4,
NOTE_C4,
NOTE_D4,
NOTE_G4,
NOTE_E4,
NOTE_C4,
NOTE_E4,
NOTE_G4,
NOTE_E4,
NOTE_C4,
NOTE_E4,
NOTE_FS4,
NOTE_D4,
NOTE_C4,
NOTE_D4,
NOTE_B4,
NOTE_C5,
NOTE_D5,
NOTE_G5,
NOTE_D5,
NOTE_C5,
NOTE_B4,
NOTE_G4,
NOTE_D5,
NOTE_D5,
NOTE_C5,
NOTE_B4,
NOTE_B4,
NOTE_C5,
NOTE_B4,
NOTE_C5,
NOTE_B4,
NOTE_C5,
NOTE_A4,
NOTE_B4,
NOTE_G4,
NOTE_A4,
NOTE_FS4,
NOTE_B4,
NOTE_C5,
NOTE_D5,
NOTE_G5,
NOTE_D5,
NOTE_C5,
NOTE_B4,
NOTE_G4,
NOTE_D5,
NOTE_G5,
NOTE_FS5,
NOTE_E5,
NOTE_D5,
NOTE_C5,
NOTE_B4,
NOTE_A4,
NOTE_B4,
NOTE_C5,
NOTE_D5,
NOTE_C5,
NOTE_B4,
NOTE_A4,
NOTE_G4,
NOTE_FS4,
NOTE_C5,
NOTE_G4,
NOTE_E4,
NOTE_G4,
NOTE_D5,
NOTE_A4,
NOTE_FS4,
NOTE_A4,
NOTE_B4,
NOTE_G4,
NOTE_D4,
NOTE_G4,
NOTE_B4,
NOTE_G4,
NOTE_D4,
NOTE_G4,
NOTE_C5,
NOTE_G4,
NOTE_E4,
NOTE_G4,
NOTE_D5,
NOTE_A4,
NOTE_FS4,
NOTE_A4,
NOTE_B4,
NOTE_G4,
NOTE_D4,
NOTE_G4,
NOTE_B4,
NOTE_G4,
NOTE_D4,
NOTE_G4,
NOTE_A4,
NOTE_E4,
NOTE_C4,
NOTE_E4,
NOTE_A4,
NOTE_E4,
NOTE_C4,
NOTE_E4,
NOTE_A4,
NOTE_E4,
NOTE_C4,
NOTE_E4,
NOTE_A4,
NOTE_E4,
NOTE_C4,
NOTE_E4,
NOTE_FS4,
NOTE_D4,
NOTE_C4,
NOTE_D4,
NOTE_G4,
NOTE_E4,
NOTE_C4,
NOTE_E4,
NOTE_G4,
NOTE_E4,
NOTE_C4,
NOTE_E4,
NOTE_FS4,
NOTE_D4,
NOTE_C4,
NOTE_D4,
};

int start_time0[] = {
0.0,
491803.0,
737704.5,
1229507.5,
1475409.0,
1721310.5,
1967212.0,
2459015.0,
2704916.5,
3196719.5,
3442621.0,
3688522.5,
4180325.5,
4426227.0,
4672128.5,
4918030.0,
6147537.5,
6393439.0,
6639340.5,
6885242.0,
7131143.5,
7377045.0,
7622946.5,
7868848.0,
8360651.0,
8606552.5,
9098355.5,
9344257.0,
9590158.5,
9836060.0,
10327863.0,
10573764.5,
11065567.5,
11311469.0,
11557370.5,
11803272.0,
12295075.0,
12540976.5,
13032779.5,
13278681.0,
13524582.5,
13770484.0,
14016385.5,
14262287.0,
14508188.5,
14754090.0,
15245893.0,
15737696.0,
15983597.5,
16229499.0,
16475400.5,
16721302.0,
16967203.5,
17213105.0,
17459006.5,
17704908.0,
17950809.5,
18196711.0,
18442612.5,
18688514.0,
18934415.5,
19180317.0,
19426218.5,
19672120.0,
19918021.5,
20163923.0,
20409824.5,
20655726.0,
20901627.5,
21147529.0,
21393430.5,
21639332.0,
21885233.5,
22131135.0,
22377036.5,
22622938.0,
22868839.5,
23114741.0,
23360642.5,
23606544.0,
23852445.5,
24098347.0,
24344248.5,
24590150.0,
24836051.5,
25081953.0,
25327854.5,
25573756.0,
25819657.5,
26065559.0,
26311460.5,
26557362.0,
26803263.5,
27049165.0,
27295066.5,
27540968.0,
27786869.5,
28032771.0,
28278672.5,
28524574.0,
28770475.5,
29016377.0,
29262278.5,
29508180.0,
29754081.5,
29999983.0,
30245884.5,
30491786.0,
30737687.5,
30983589.0,
31229490.5,
31475392.0,
31967195.0,
32213096.5,
32704899.5,
32950801.0,
33196702.5,
33442604.0,
33934407.0,
34180308.5,
34672111.5,
34918013.0,
35163914.5,
35655717.5,
35901619.0,
36147520.5,
36393422.0,
37622929.5,
37868831.0,
38114732.5,
38360634.0,
38606535.5,
38852437.0,
39098338.5,
39344240.0,
39836043.0,
40081944.5,
40573747.5,
40819649.0,
41065550.5,
41311452.0,
41803255.0,
42049156.5,
42540959.5,
42786861.0,
43032762.5,
43278664.0,
43770467.0,
44016368.5,
44508171.5,
44754073.0,
44999974.5,
45245876.0,
45491777.5,
45737679.0,
45983580.5,
46229482.0,
46721285.0,
47213088.0,
47458989.5,
47704891.0,
47950792.5,
48196694.0,
48442595.5,
48688497.0,
48934398.5,
49180300.0,
49426201.5,
49672103.0,
49918004.5,
50163906.0,
50409807.5,
50655709.0,
50901610.5,
51147512.0,
51393413.5,
51639315.0,
51885216.5,
52131118.0,
52377019.5,
52622921.0,
52868822.5,
53114724.0,
53360625.5,
53606527.0,
53852428.5,
54098330.0,
54344231.5,
54590133.0,
54836034.5,
55081936.0,
55327837.5,
55573739.0,
55819640.5,
56065542.0,
56311443.5,
56557345.0,
56803246.5,
57049148.0,
57295049.5,
57540951.0,
57786852.5,
58032754.0,
58278655.5,
58524557.0,
58770458.5,
59016360.0,
59262261.5,
59508163.0,
59754064.5,
59999966.0,
60245867.5,
60491769.0,
60737670.5,
60983572.0,
61229473.5,
61475375.0,
61721276.5,
61967178.0,
62213079.5,
62458981.0,
62704882.5,
};

int duration0[] = {
491803.0,
245901.5,
491803.0,
245901.5,
245901.5,
245901.5,
491803.0,
245901.5,
491803.0,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
983606.0,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
491803.0,
245901.5,
491803.0,
245901.5,
245901.5,
245901.5,
491803.0,
245901.5,
491803.0,
245901.5,
245901.5,
245901.5,
491803.0,
245901.5,
491803.0,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
491803.0,
491803.0,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
491803.0,
245901.5,
491803.0,
245901.5,
245901.5,
245901.5,
491803.0,
245901.5,
491803.0,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
983606.0,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
491803.0,
245901.5,
491803.0,
245901.5,
245901.5,
245901.5,
491803.0,
245901.5,
491803.0,
245901.5,
245901.5,
245901.5,
491803.0,
245901.5,
491803.0,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
491803.0,
491803.0,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
};

int melody1[] = {
NOTE_D6,
NOTE_C6,
NOTE_B5,
NOTE_A5,
NOTE_G6,
NOTE_E6,
NOTE_FS6,
NOTE_E6,
NOTE_D6,
NOTE_B5,
NOTE_G5,
NOTE_G5,
NOTE_A5,
NOTE_B5,
NOTE_C6,
NOTE_FS5,
NOTE_G5,
NOTE_A5,
NOTE_B5,
NOTE_C6,
NOTE_B5,
NOTE_A5,
NOTE_D6,
NOTE_C6,
NOTE_B5,
NOTE_D6,
NOTE_G6,
NOTE_FS6,
NOTE_FS6,
NOTE_G6,
NOTE_E6,
NOTE_D6,
NOTE_D6,
NOTE_C6,
NOTE_B5,
NOTE_A5,
NOTE_G5,
NOTE_D6,
NOTE_C6,
NOTE_B5,
NOTE_A5,
NOTE_G5,
NOTE_G5,
NOTE_A5,
NOTE_B5,
NOTE_C6,
NOTE_D6,
NOTE_C6,
NOTE_B5,
NOTE_G5,
NOTE_A5,
NOTE_B5,
NOTE_C6,
NOTE_C6,
NOTE_D6,
NOTE_C6,
NOTE_D6,
NOTE_B5,
NOTE_B5,
NOTE_A5,
NOTE_G5,
NOTE_A5,
NOTE_E5,
NOTE_B5,
NOTE_A5,
NOTE_G5,
NOTE_E5,
NOTE_FS5,
NOTE_G5,
NOTE_B5,
NOTE_B5,
NOTE_A5,
NOTE_D6,
NOTE_C6,
NOTE_B5,
NOTE_A5,
NOTE_G6,
NOTE_E6,
NOTE_FS6,
NOTE_E6,
NOTE_D6,
NOTE_B5,
NOTE_G5,
NOTE_G5,
NOTE_A5,
NOTE_B5,
NOTE_C6,
NOTE_FS5,
NOTE_G5,
NOTE_A5,
NOTE_B5,
NOTE_C6,
NOTE_B5,
NOTE_A5,
NOTE_D6,
NOTE_C6,
NOTE_B5,
NOTE_D6,
NOTE_G6,
NOTE_FS6,
NOTE_FS6,
NOTE_G6,
NOTE_E6,
NOTE_D6,
NOTE_D6,
NOTE_C6,
NOTE_B5,
NOTE_A5,
NOTE_G5,
NOTE_D6,
NOTE_C6,
NOTE_B5,
NOTE_A5,
NOTE_G5,
NOTE_G5,
NOTE_A5,
NOTE_B5,
NOTE_C6,
NOTE_D6,
NOTE_C6,
NOTE_B5,
NOTE_G5,
NOTE_A5,
NOTE_B5,
NOTE_C6,
NOTE_C6,
NOTE_D6,
NOTE_C6,
NOTE_D6,
NOTE_B5,
NOTE_B5,
NOTE_A5,
NOTE_G5,
NOTE_A5,
NOTE_E5,
NOTE_B5,
NOTE_A5,
NOTE_G5,
NOTE_E5,
NOTE_FS5,
NOTE_G5,
NOTE_B5,
NOTE_B5,
NOTE_A5,
};

int start_time1[] = {
0.0,
245901.5,
491803.0,
737704.5,
983606.0,
1229507.5,
1475409.0,
1721310.5,
1967212.0,
2704916.5,
2950818.0,
3196719.5,
3442621.0,
3688522.5,
3934424.0,
5163931.5,
5409833.0,
5655734.5,
5901636.0,
6639340.5,
6762291.25,
6885242.0,
7868848.0,
8114749.5,
8360651.0,
8606552.5,
8852454.0,
9098355.5,
9344257.0,
9590158.5,
9836060.0,
10573764.5,
10819666.0,
11803272.0,
12049173.5,
12295075.0,
12540976.5,
12786878.0,
13032779.5,
13278681.0,
13524582.5,
13770484.0,
14999991.5,
15245893.0,
15491794.5,
15737696.0,
16721302.0,
17459006.5,
17704908.0,
18934415.5,
19180317.0,
19426218.5,
19672120.0,
20163923.0,
20655726.0,
21393430.5,
21516381.25,
21639332.0,
22868839.5,
23114741.0,
23360642.5,
23606544.0,
24590150.0,
25081953.0,
25573756.0,
26557362.0,
27049165.0,
27540968.0,
28524574.0,
29016377.0,
29508180.0,
30491786.0,
31475392.0,
31721293.5,
31967195.0,
32213096.5,
32458998.0,
32704899.5,
32950801.0,
33196702.5,
33442604.0,
34180308.5,
34426210.0,
34672111.5,
34918013.0,
35163914.5,
35409816.0,
36639323.5,
36885225.0,
37131126.5,
37377028.0,
38114732.5,
38237683.25,
38360634.0,
39344240.0,
39590141.5,
39836043.0,
40081944.5,
40327846.0,
40573747.5,
40819649.0,
41065550.5,
41311452.0,
42049156.5,
42295058.0,
43278664.0,
43524565.5,
43770467.0,
44016368.5,
44262270.0,
44508171.5,
44754073.0,
44999974.5,
45245876.0,
46475383.5,
46721285.0,
46967186.5,
47213088.0,
48196694.0,
48934398.5,
49180300.0,
50409807.5,
50655709.0,
50901610.5,
51147512.0,
51639315.0,
52131118.0,
52868822.5,
52991773.25,
53114724.0,
54344231.5,
54590133.0,
54836034.5,
55081936.0,
56065542.0,
56557345.0,
57049148.0,
58032754.0,
58524557.0,
59016360.0,
59999966.0,
60491769.0,
60983572.0,
61967178.0,
};

int duration1[] = {
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
737704.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
1229507.5,
245901.5,
245901.5,
245901.5,
737704.5,
122950.75,
122950.75,
983606.0,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
737704.5,
245901.5,
983606.0,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
1229507.5,
245901.5,
245901.5,
245901.5,
983606.0,
737704.5,
245901.5,
1229507.5,
245901.5,
245901.5,
245901.5,
491803.0,
491803.0,
737704.5,
122950.75,
122950.75,
1229507.5,
245901.5,
245901.5,
245901.5,
983606.0,
491803.0,
491803.0,
983606.0,
491803.0,
491803.0,
983606.0,
491803.0,
491803.0,
983606.0,
983606.0,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
737704.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
1229507.5,
245901.5,
245901.5,
245901.5,
737704.5,
122950.75,
122950.75,
983606.0,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
737704.5,
245901.5,
983606.0,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
245901.5,
1229507.5,
245901.5,
245901.5,
245901.5,
983606.0,
737704.5,
245901.5,
1229507.5,
245901.5,
245901.5,
245901.5,
491803.0,
491803.0,
737704.5,
122950.75,
122950.75,
1229507.5,
245901.5,
245901.5,
245901.5,
983606.0,
491803.0,
491803.0,
983606.0,
491803.0,
491803.0,
983606.0,
491803.0,
491803.0,
983606.0,
983606.0,
};

int melody2[] = {
NOTE_G4,
NOTE_E4,
NOTE_FS4,
NOTE_G4,
NOTE_A4,
NOTE_G4,
NOTE_E4,
NOTE_FS4,
NOTE_E4,
NOTE_G4,
NOTE_E4,
NOTE_D4,
NOTE_G4,
NOTE_E4,
NOTE_FS4,
NOTE_G4,
NOTE_A4,
NOTE_G4,
NOTE_E4,
NOTE_FS4,
NOTE_A4,
NOTE_G4,
NOTE_E4,
NOTE_D4,
NOTE_C4,
NOTE_D4,
NOTE_G4,
NOTE_E4,
NOTE_D4,
NOTE_C4,
NOTE_D4,
NOTE_G4,
NOTE_A4,
NOTE_G4,
NOTE_E4,
NOTE_A4,
NOTE_E4,
NOTE_G4,
NOTE_FS4,
NOTE_E4,
NOTE_FS4,
NOTE_G4,
NOTE_E4,
NOTE_FS4,
NOTE_G4,
NOTE_A4,
NOTE_G4,
NOTE_E4,
NOTE_FS4,
NOTE_E4,
NOTE_G4,
NOTE_E4,
NOTE_D4,
NOTE_G4,
NOTE_E4,
NOTE_FS4,
NOTE_G4,
NOTE_A4,
NOTE_G4,
NOTE_E4,
NOTE_FS4,
NOTE_A4,
NOTE_G4,
NOTE_E4,
NOTE_D4,
NOTE_C4,
NOTE_D4,
NOTE_G4,
NOTE_E4,
NOTE_D4,
NOTE_C4,
NOTE_D4,
NOTE_G4,
NOTE_A4,
NOTE_G4,
NOTE_E4,
NOTE_A4,
NOTE_E4,
NOTE_G4,
NOTE_FS4,
NOTE_E4,
NOTE_FS4,
};

int start_time2[] = {
0.0,
737704.5,
1475409.0,
1967212.0,
2704916.5,
3442621.0,
3934424.0,
4672128.5,
5409833.0,
5901636.0,
6639340.5,
7377045.0,
7868848.0,
8606552.5,
9344257.0,
9836060.0,
10573764.5,
11311469.0,
11803272.0,
12540976.5,
13278681.0,
13770484.0,
14508188.5,
15245893.0,
15737696.0,
16721302.0,
17704908.0,
18688514.0,
19180317.0,
19672120.0,
20655726.0,
21639332.0,
22622938.0,
23114741.0,
23606544.0,
24590150.0,
25573756.0,
26557362.0,
27540968.0,
28524574.0,
30491786.0,
31475392.0,
32213096.5,
32950801.0,
33442604.0,
34180308.5,
34918013.0,
35409816.0,
36147520.5,
36885225.0,
37377028.0,
38114732.5,
38852437.0,
39344240.0,
40081944.5,
40819649.0,
41311452.0,
42049156.5,
42786861.0,
43278664.0,
44016368.5,
44754073.0,
45245876.0,
45983580.5,
46721285.0,
47213088.0,
48196694.0,
49180300.0,
50163906.0,
50655709.0,
51147512.0,
52131118.0,
53114724.0,
54098330.0,
54590133.0,
55081936.0,
56065542.0,
57049148.0,
58032754.0,
59016360.0,
59999966.0,
61967178.0,
};

int duration2[] = {
737704.5,
737704.5,
491803.0,
737704.5,
737704.5,
491803.0,
737704.5,
737704.5,
491803.0,
737704.5,
737704.5,
491803.0,
737704.5,
737704.5,
491803.0,
737704.5,
737704.5,
491803.0,
737704.5,
737704.5,
491803.0,
737704.5,
737704.5,
491803.0,
983606.0,
983606.0,
983606.0,
491803.0,
491803.0,
983606.0,
983606.0,
983606.0,
491803.0,
491803.0,
983606.0,
983606.0,
983606.0,
983606.0,
983606.0,
1967212.0,
983606.0,
737704.5,
737704.5,
491803.0,
737704.5,
737704.5,
491803.0,
737704.5,
737704.5,
491803.0,
737704.5,
737704.5,
491803.0,
737704.5,
737704.5,
491803.0,
737704.5,
737704.5,
491803.0,
737704.5,
737704.5,
491803.0,
737704.5,
737704.5,
491803.0,
983606.0,
983606.0,
983606.0,
491803.0,
491803.0,
983606.0,
983606.0,
983606.0,
491803.0,
491803.0,
983606.0,
983606.0,
983606.0,
983606.0,
983606.0,
1967212.0,
983606.0,
};



int main_cycle_usec = 10;
int master_time = 0;

int notepin0 = 3;
int notepin2 = 5;
int notepin1 = 25;

int elapsed0 = 0;
int elapsed1 = 0;
int elapsed2 = 0;

int state0 = 0;
int state1 = 0;
int state2 = 0;

void setup() {
  Serial.begin(9600);
  pinMode(13, OUTPUT);
  pinMode(notepin0, OUTPUT);
  pinMode(notepin1, OUTPUT);
  pinMode(notepin2, OUTPUT);

  digitalWrite(13, HIGH);
  delay(500);
  digitalWrite(13, LOW);
  delay(500);
  digitalWrite(13, HIGH);
  delay(500);
  digitalWrite(13, LOW);
  delay(500);
//  tone(3, 40);
//  tone(9, 440);
  
}

float current_time;

int size0 = sizeof(melody0)/sizeof(melody0[0]);
int size1 = sizeof(melody1)/sizeof(melody1[0]);
int size2 = sizeof(melody2)/sizeof(melody2[0]);


void loop() {
  Serial.println(size0);
  Serial.println(size1);
  Serial.println(size2);
  
  int usec2 = 0;//(1000000/freq2)/2;

  int end0 = 0;
  int end1 = 0;
  int end2 = 0;

  int i = -1;
  int j = -1;
  int k = -1;
    
  int note0_active = 0;
  float note0_start = 0;
  float note0_end = micros();
  float wait_time0 = 0;
  
  int note1_active = 0;
  float note1_start = 0;
  float note1_end = micros();
  float wait_time1 = 0;
  
  int note2_active = 0;
  float note2_start = 0;
  float note2_end = micros();
  float wait_time2 = 0;

  float start_time = micros();

  while(1){

    current_time = micros();


    // ### VOICE 0 ### //
        
    if (!note0_active){
      // Check if voice is already done, do nothing if True
      if (end0){
        i;
      }
      // Check if note needs to start
      else if ((current_time - note0_end) >= wait_time0){
        i++;
//        Serial.print("I: ");
//        Serial.println(i);
        note0_active = 1;
        analogWriteFrequency(notepin0, melody0[i]);
        analogWrite(notepin0, 128);
        note0_start = micros();
      }
    }
    else{
      // Check if note needs to end      
      if ((current_time - note0_start) >= duration0[i]){
        note0_active = 0;
        analogWrite(notepin0, 0);

        // Check if already at song end
        if (i+1 == size0){
//          Serial.println("END0");
          end0 = 1;
        }
        else{
          note0_end = micros();
          wait_time0 = start_time0[i+1] - (start_time0[i] + duration0[i]); // consider hardcoding this to reduce cycle time
        }
      }  
    }



    // ### VOICE 1 ### //
    
    if (!note1_active){
      // Check if voice is already done, do nothing if True
      if (end1){
        j;
      }
      // Check if note needs to start
      else if ((current_time - note1_end) >= wait_time1){
        j++;
//        Serial.print("J: ");
//        Serial.println(j);
        note1_active = 1;
        analogWriteFrequency(notepin1, melody1[j]);
        analogWrite(notepin1, 128);
        note1_start = micros();
      }
    }
    else{
      // Check if note needs to end      
      if ((current_time - note1_start) >= duration1[j]){
        note1_active = 0;
        analogWrite(notepin1, 0);

        // Check if already at song end
        if (j+1 == size1){
//          Serial.println("END1");
          end1 = 1;
        }
        else{
          note1_end = micros();
          wait_time1 = start_time1[j+1] - (start_time1[j] + duration1[j]); // consider hardcoding this to reduce cycle time
        }
      }
    }


    // ### VOICE 2 ### //

    if (!note2_active){
      // Check if voice is already done, do nothing if True
      if (end2){
        k;
      }
      // Check if note needs to start
      else if ((current_time - note2_end) >= wait_time2){
        k++;
//        Serial.print("k: ");
//        Serial.println(k);
        note2_active = 1;
        analogWriteFrequency(notepin2, melody2[k]);
        analogWrite(notepin2, 128);
        note2_start = micros();
      }
    }
    else{
      // Check if note needs to end      
      if ((current_time - note2_start) >= duration2[k]){
        note2_active = 0;
        analogWrite(notepin2, 0);

        // Check if already at song end
        if (k+1 == size2){
//          Serial.println("END2");
          end2 = 1;
        }
        else{
          note2_end = micros();
          wait_time2 = start_time2[k+1] - (start_time2[k] + duration2[k]); // consider hardcoding this to reduce cycle time
        }
      }
    }
//
//    if (!note2_active){
//      // Check if voice is already done, do nothing if True
//      if (end2){
//        k;
//      }
//      // Check if note needs to start
//      else if ((current_time - note2_end) >= wait_time2){
//        k++;
////        Serial.print("K: ");
////        Serial.println(k);
//        note2_active = 1;
//        digitalWrite(notepin2, HIGH);
//        elapsed2 = 0;
//        note2_start = micros();
//        usec2 = (1000000/melody2[k])/2;
//      }
//    }
//    else{
//      // Check if note needs to end      
//      if ((current_time - note2_start) >= duration2[k]){
//        note2_active = 0;
//        digitalWrite(notepin2, LOW);
//
//        // Check if already at song end
//        if (k+1 == size2){
////          Serial.println("END2");
//          end2 = 1;
//        }
//        else{
//          note2_end = micros();
//          wait_time2 = start_time2[k+1] - (start_time2[k] + duration2[k]); // consider hardcoding this to reduce cycle time
//        }
//      }

//      // If didn't end, check proper note state and set if needed
//      if (elapsed2 > usec2){
//        state2 = !state2;
//        digitalWrite(notepin2, state2);
//        elapsed2 = 0;
//      }      
//    }

    // If all voices are finished, break out of while loop and play song again
    if (end0 & end1 & end2){
      break;
    }

//    elapsed2 += main_cycle_usec;
    delayMicroseconds(main_cycle_usec);
  }

  digitalWrite(13, HIGH);
  delay(500);
  digitalWrite(13, LOW);
  delay(500);
  digitalWrite(13, HIGH);
  delay(500);
  digitalWrite(13, LOW);
  delay(500);
}
