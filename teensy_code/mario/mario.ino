
#include <pitches.h>

int melody0[] = {
NOTE_E5,
NOTE_E5,
NOTE_E5,
NOTE_C5,
NOTE_E5,
NOTE_G5,
NOTE_C5,
NOTE_G4,
NOTE_E4,
NOTE_A4,
NOTE_B4,
NOTE_AS4,
NOTE_A4,
NOTE_G4,
NOTE_E5,
NOTE_G5,
NOTE_A5,
NOTE_F5,
NOTE_G5,
NOTE_E5,
NOTE_C5,
NOTE_D5,
NOTE_B4,
NOTE_C5,
NOTE_G4,
NOTE_E4,
NOTE_A4,
NOTE_B4,
NOTE_AS4,
NOTE_A4,
NOTE_G4,
NOTE_E5,
NOTE_G5,
NOTE_A5,
NOTE_F5,
NOTE_G5,
NOTE_E5,
NOTE_C5,
NOTE_D5,
NOTE_B4,
NOTE_G5,
NOTE_FS5,
NOTE_F5,
NOTE_DS5,
NOTE_E5,
NOTE_GS4,
NOTE_A4,
NOTE_C5,
NOTE_A4,
NOTE_C5,
NOTE_D5,
NOTE_G5,
NOTE_FS5,
NOTE_F5,
NOTE_DS5,
NOTE_E5,
NOTE_C6,
NOTE_C6,
NOTE_C6,
NOTE_G5,
NOTE_FS5,
NOTE_F5,
NOTE_DS5,
NOTE_E5,
NOTE_GS4,
NOTE_A4,
NOTE_C5,
NOTE_A4,
NOTE_C5,
NOTE_D5,
NOTE_DS5,
NOTE_D5,
NOTE_C5,
NOTE_G5,
NOTE_FS5,
NOTE_F5,
NOTE_DS5,
NOTE_E5,
NOTE_GS4,
NOTE_A4,
NOTE_C5,
NOTE_A4,
NOTE_C5,
NOTE_D5,
NOTE_G5,
NOTE_FS5,
NOTE_F5,
NOTE_DS5,
NOTE_E5,
NOTE_C6,
NOTE_C6,
NOTE_C6,
NOTE_G5,
NOTE_FS5,
NOTE_F5,
NOTE_DS5,
NOTE_E5,
NOTE_GS4,
NOTE_A4,
NOTE_C5,
NOTE_A4,
NOTE_C5,
NOTE_D5,
NOTE_DS5,
NOTE_D5,
NOTE_C5,
NOTE_C5,
NOTE_C5,
NOTE_C5,
NOTE_C5,
NOTE_D5,
NOTE_E5,
NOTE_C5,
NOTE_A4,
NOTE_G4,
NOTE_C5,
NOTE_C5,
NOTE_C5,
NOTE_C5,
NOTE_D5,
NOTE_E5,
NOTE_C5,
NOTE_C5,
NOTE_C5,
NOTE_C5,
NOTE_D5,
NOTE_E5,
NOTE_C5,
NOTE_A4,
NOTE_G4,
NOTE_E5,
NOTE_E5,
NOTE_E5,
NOTE_C5,
NOTE_E5,
NOTE_G5,
NOTE_C5,
NOTE_G4,
NOTE_E4,
NOTE_A4,
NOTE_B4,
NOTE_AS4,
NOTE_A4,
NOTE_G4,
NOTE_E5,
NOTE_G5,
NOTE_A5,
NOTE_F5,
NOTE_G5,
NOTE_E5,
NOTE_C5,
NOTE_D5,
NOTE_B4,
NOTE_C5,
NOTE_G4,
NOTE_E4,
NOTE_A4,
NOTE_B4,
NOTE_AS4,
NOTE_A4,
NOTE_G4,
NOTE_E5,
NOTE_G5,
NOTE_A5,
NOTE_F5,
NOTE_G5,
NOTE_E5,
NOTE_C5,
NOTE_D5,
NOTE_B4,
NOTE_E5,
NOTE_C5,
NOTE_G4,
NOTE_GS4,
NOTE_A4,
NOTE_F5,
NOTE_F5,
NOTE_A4,
NOTE_B4,
NOTE_A5,
NOTE_A5,
NOTE_A5,
NOTE_G5,
NOTE_F5,
NOTE_E5,
NOTE_C5,
NOTE_A4,
NOTE_G4,
NOTE_E5,
NOTE_C5,
NOTE_G4,
NOTE_GS4,
NOTE_A4,
NOTE_F5,
NOTE_F5,
NOTE_A4,
NOTE_B4,
NOTE_F5,
NOTE_F5,
NOTE_F5,
NOTE_E5,
NOTE_D5,
NOTE_C5,
NOTE_E5,
NOTE_C5,
NOTE_G4,
NOTE_GS4,
NOTE_A4,
NOTE_F5,
NOTE_F5,
NOTE_A4,
NOTE_B4,
NOTE_A5,
NOTE_A5,
NOTE_A5,
NOTE_G5,
NOTE_F5,
NOTE_E5,
NOTE_C5,
NOTE_A4,
NOTE_G4,
NOTE_E5,
NOTE_C5,
NOTE_G4,
NOTE_GS4,
NOTE_A4,
NOTE_F5,
NOTE_F5,
NOTE_A4,
NOTE_B4,
NOTE_F5,
NOTE_F5,
NOTE_F5,
NOTE_E5,
NOTE_D5,
NOTE_C5,
NOTE_C5,
NOTE_C5,
NOTE_C5,
NOTE_C5,
NOTE_D5,
NOTE_E5,
NOTE_C5,
NOTE_A4,
NOTE_G4,
NOTE_C5,
NOTE_C5,
NOTE_C5,
NOTE_C5,
NOTE_D5,
NOTE_E5,
NOTE_C5,
NOTE_C5,
NOTE_C5,
NOTE_C5,
NOTE_D5,
NOTE_E5,
NOTE_C5,
NOTE_A4,
NOTE_G4,
NOTE_E5,
NOTE_E5,
NOTE_E5,
NOTE_C5,
NOTE_E5,
NOTE_G5,
NOTE_E5,
NOTE_C5,
NOTE_G4,
NOTE_GS4,
NOTE_A4,
NOTE_F5,
NOTE_F5,
NOTE_A4,
NOTE_B4,
NOTE_A5,
NOTE_A5,
NOTE_A5,
NOTE_G5,
NOTE_F5,
NOTE_E5,
NOTE_C5,
NOTE_A4,
NOTE_G4,
NOTE_E5,
NOTE_C5,
NOTE_G4,
NOTE_GS4,
NOTE_A4,
NOTE_F5,
NOTE_F5,
NOTE_A4,
NOTE_B4,
NOTE_F5,
NOTE_F5,
NOTE_F5,
NOTE_E5,
NOTE_D5,
NOTE_C5,
};

float start_time0[] = {
0.0,
142857.0,
428571.0,
714285.0,
857142.0,
1142856.0,
2285712.0,
2714283.0,
3142854.0,
3571425.0,
3857139.0,
4142853.0,
4285710.0,
4571424.0,
4761900.0,
4952376.0,
5142852.0,
5428566.0,
5571423.0,
5857137.0,
6142851.0,
6285708.0,
6428565.0,
6857136.0,
7285707.0,
7714278.0,
8142849.0,
8428563.0,
8714277.0,
8857134.0,
9142848.0,
9333324.0,
9523800.0,
9714276.0,
9999990.0,
10142847.0,
10428561.0,
10714275.0,
10857132.0,
10999989.0,
11714274.0,
11857131.0,
11999988.0,
12142845.0,
12428559.0,
12714273.0,
12857130.0,
12999987.0,
13285701.0,
13428558.0,
13571415.0,
13999986.0,
14142843.0,
14285700.0,
14428557.0,
14714271.0,
14999985.0,
15285699.0,
15428556.0,
16285698.0,
16428555.0,
16571412.0,
16714269.0,
16999983.0,
17285697.0,
17428554.0,
17571411.0,
17857125.0,
17999982.0,
18142839.0,
18571410.0,
18999981.0,
19428552.0,
20857122.0,
20999979.0,
21142836.0,
21285693.0,
21571407.0,
21857121.0,
21999978.0,
22142835.0,
22428549.0,
22571406.0,
22714263.0,
23142834.0,
23285691.0,
23428548.0,
23571405.0,
23857119.0,
24142833.0,
24428547.0,
24571404.0,
25428546.0,
25571403.0,
25714260.0,
25857117.0,
26142831.0,
26428545.0,
26571402.0,
26714259.0,
26999973.0,
27142830.0,
27285687.0,
27714258.0,
28142829.0,
28571400.0,
29714256.0,
29857113.0,
30142827.0,
30428541.0,
30571398.0,
30857112.0,
30999969.0,
31285683.0,
31428540.0,
31999968.0,
32142825.0,
32428539.0,
32714253.0,
32857110.0,
32999967.0,
34285680.0,
34428537.0,
34714251.0,
34999965.0,
35142822.0,
35428536.0,
35571393.0,
35857107.0,
35999964.0,
36571392.0,
36714249.0,
36999963.0,
37285677.0,
37428534.0,
37714248.0,
38857104.0,
39285675.0,
39714246.0,
40142817.0,
40428531.0,
40714245.0,
40857102.0,
41142816.0,
41333292.0,
41523768.0,
41714244.0,
41999958.0,
42142815.0,
42428529.0,
42714243.0,
42857100.0,
42999957.0,
43428528.0,
43857099.0,
44285670.0,
44714241.0,
44999955.0,
45285669.0,
45428526.0,
45714240.0,
45904716.0,
46095192.0,
46285668.0,
46571382.0,
46714239.0,
46999953.0,
47285667.0,
47428524.0,
47571381.0,
47999952.0,
48142809.0,
48428523.0,
48857094.0,
49142808.0,
49285665.0,
49571379.0,
49714236.0,
50285664.0,
50476140.0,
50666616.0,
50857092.0,
51047568.0,
51238044.0,
51428520.0,
51571377.0,
51857091.0,
51999948.0,
52571376.0,
52714233.0,
52999947.0,
53428518.0,
53714232.0,
53857089.0,
54142803.0,
54285660.0,
54857088.0,
54999945.0,
55285659.0,
55428516.0,
55618992.0,
55809468.0,
55999944.0,
57142800.0,
57285657.0,
57571371.0,
57999942.0,
58285656.0,
58428513.0,
58714227.0,
58857084.0,
59428512.0,
59618988.0,
59809464.0,
59999940.0,
60190416.0,
60380892.0,
60571368.0,
60714225.0,
60999939.0,
61142796.0,
61714224.0,
61857081.0,
62142795.0,
62571366.0,
62857080.0,
62999937.0,
63285651.0,
63428508.0,
63999936.0,
64142793.0,
64428507.0,
64571364.0,
64761840.0,
64952316.0,
65142792.0,
66285648.0,
66428505.0,
66714219.0,
66999933.0,
67142790.0,
67428504.0,
67571361.0,
67857075.0,
67999932.0,
68571360.0,
68714217.0,
68999931.0,
69285645.0,
69428502.0,
69571359.0,
70857072.0,
70999929.0,
71285643.0,
71571357.0,
71714214.0,
71999928.0,
72142785.0,
72428499.0,
72571356.0,
73142784.0,
73285641.0,
73571355.0,
73857069.0,
73999926.0,
74285640.0,
75428496.0,
75571353.0,
75857067.0,
76285638.0,
76571352.0,
76714209.0,
76999923.0,
77142780.0,
77714208.0,
77904684.0,
78095160.0,
78285636.0,
78476112.0,
78666588.0,
78857064.0,
78999921.0,
79285635.0,
79428492.0,
79999920.0,
80142777.0,
80428491.0,
80857062.0,
81142776.0,
81285633.0,
81571347.0,
81714204.0,
82285632.0,
82428489.0,
82714203.0,
82857060.0,
83047536.0,
83238012.0,
83428488.0,
};

float duration0[] = {
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
};

float end_time0[] = {
95238.0,
238095.0,
523809.0,
809523.0,
952380.0,
1238094.0,
2380950.0,
2809521.0,
3238092.0,
3666663.0,
3952377.0,
4238091.0,
4380948.0,
4666662.0,
4857138.0,
5047614.0,
5238090.0,
5523804.0,
5666661.0,
5952375.0,
6238089.0,
6380946.0,
6523803.0,
6952374.0,
7380945.0,
7809516.0,
8238087.0,
8523801.0,
8809515.0,
8952372.0,
9238086.0,
9428562.0,
9619038.0,
9809514.0,
10095228.0,
10238085.0,
10523799.0,
10809513.0,
10952370.0,
11095227.0,
11809512.0,
11952369.0,
12095226.0,
12238083.0,
12523797.0,
12809511.0,
12952368.0,
13095225.0,
13380939.0,
13523796.0,
13666653.0,
14095224.0,
14238081.0,
14380938.0,
14523795.0,
14809509.0,
15095223.0,
15380937.0,
15523794.0,
16380936.0,
16523793.0,
16666650.0,
16809507.0,
17095221.0,
17380935.0,
17523792.0,
17666649.0,
17952363.0,
18095220.0,
18238077.0,
18666648.0,
19095219.0,
19523790.0,
20952360.0,
21095217.0,
21238074.0,
21380931.0,
21666645.0,
21952359.0,
22095216.0,
22238073.0,
22523787.0,
22666644.0,
22809501.0,
23238072.0,
23380929.0,
23523786.0,
23666643.0,
23952357.0,
24238071.0,
24523785.0,
24666642.0,
25523784.0,
25666641.0,
25809498.0,
25952355.0,
26238069.0,
26523783.0,
26666640.0,
26809497.0,
27095211.0,
27238068.0,
27380925.0,
27809496.0,
28238067.0,
28666638.0,
29809494.0,
29952351.0,
30238065.0,
30523779.0,
30666636.0,
30952350.0,
31095207.0,
31380921.0,
31523778.0,
32095206.0,
32238063.0,
32523777.0,
32809491.0,
32952348.0,
33095205.0,
34380918.0,
34523775.0,
34809489.0,
35095203.0,
35238060.0,
35523774.0,
35666631.0,
35952345.0,
36095202.0,
36666630.0,
36809487.0,
37095201.0,
37380915.0,
37523772.0,
37809486.0,
38952342.0,
39380913.0,
39809484.0,
40238055.0,
40523769.0,
40809483.0,
40952340.0,
41238054.0,
41428530.0,
41619006.0,
41809482.0,
42095196.0,
42238053.0,
42523767.0,
42809481.0,
42952338.0,
43095195.0,
43523766.0,
43952337.0,
44380908.0,
44809479.0,
45095193.0,
45380907.0,
45523764.0,
45809478.0,
45999954.0,
46190430.0,
46380906.0,
46666620.0,
46809477.0,
47095191.0,
47380905.0,
47523762.0,
47666619.0,
48095190.0,
48238047.0,
48523761.0,
48952332.0,
49238046.0,
49380903.0,
49666617.0,
49809474.0,
50380902.0,
50571378.0,
50761854.0,
50952330.0,
51142806.0,
51333282.0,
51523758.0,
51666615.0,
51952329.0,
52095186.0,
52666614.0,
52809471.0,
53095185.0,
53523756.0,
53809470.0,
53952327.0,
54238041.0,
54380898.0,
54952326.0,
55095183.0,
55380897.0,
55523754.0,
55714230.0,
55904706.0,
56095182.0,
57238038.0,
57380895.0,
57666609.0,
58095180.0,
58380894.0,
58523751.0,
58809465.0,
58952322.0,
59523750.0,
59714226.0,
59904702.0,
60095178.0,
60285654.0,
60476130.0,
60666606.0,
60809463.0,
61095177.0,
61238034.0,
61809462.0,
61952319.0,
62238033.0,
62666604.0,
62952318.0,
63095175.0,
63380889.0,
63523746.0,
64095174.0,
64238031.0,
64523745.0,
64666602.0,
64857078.0,
65047554.0,
65238030.0,
66380886.0,
66523743.0,
66809457.0,
67095171.0,
67238028.0,
67523742.0,
67666599.0,
67952313.0,
68095170.0,
68666598.0,
68809455.0,
69095169.0,
69380883.0,
69523740.0,
69666597.0,
70952310.0,
71095167.0,
71380881.0,
71666595.0,
71809452.0,
72095166.0,
72238023.0,
72523737.0,
72666594.0,
73238022.0,
73380879.0,
73666593.0,
73952307.0,
74095164.0,
74380878.0,
75523734.0,
75666591.0,
75952305.0,
76380876.0,
76666590.0,
76809447.0,
77095161.0,
77238018.0,
77809446.0,
77999922.0,
78190398.0,
78380874.0,
78571350.0,
78761826.0,
78952302.0,
79095159.0,
79380873.0,
79523730.0,
80095158.0,
80238015.0,
80523729.0,
80952300.0,
81238014.0,
81380871.0,
81666585.0,
81809442.0,
82380870.0,
82523727.0,
82809441.0,
82952298.0,
83142774.0,
83333250.0,
83523726.0,
};

int melody1[] = {
NOTE_FS4,
NOTE_FS4,
NOTE_FS4,
NOTE_FS4,
NOTE_FS4,
NOTE_B4,
NOTE_G4,
NOTE_E4,
NOTE_C4,
NOTE_G3,
NOTE_C4,
NOTE_D4,
NOTE_CS4,
NOTE_C4,
NOTE_C4,
NOTE_G4,
NOTE_B4,
NOTE_C5,
NOTE_A4,
NOTE_B4,
NOTE_A4,
NOTE_E4,
NOTE_F4,
NOTE_D4,
NOTE_E4,
NOTE_C4,
NOTE_G3,
NOTE_C4,
NOTE_D4,
NOTE_CS4,
NOTE_C4,
NOTE_C4,
NOTE_G4,
NOTE_B4,
NOTE_C5,
NOTE_A4,
NOTE_B4,
NOTE_A4,
NOTE_E4,
NOTE_F4,
NOTE_D4,
NOTE_E5,
NOTE_DS5,
NOTE_D5,
NOTE_B4,
NOTE_C5,
NOTE_E4,
NOTE_F4,
NOTE_G4,
NOTE_C4,
NOTE_E4,
NOTE_F4,
NOTE_E5,
NOTE_DS5,
NOTE_D5,
NOTE_B4,
NOTE_C5,
NOTE_F5,
NOTE_F5,
NOTE_F5,
NOTE_E5,
NOTE_DS5,
NOTE_D5,
NOTE_B4,
NOTE_C5,
NOTE_E4,
NOTE_F4,
NOTE_G4,
NOTE_C4,
NOTE_E4,
NOTE_F4,
NOTE_GS4,
NOTE_F4,
NOTE_E4,
NOTE_E5,
NOTE_DS5,
NOTE_D5,
NOTE_B4,
NOTE_C5,
NOTE_E4,
NOTE_F4,
NOTE_G4,
NOTE_C4,
NOTE_E4,
NOTE_F4,
NOTE_E5,
NOTE_DS5,
NOTE_D5,
NOTE_B4,
NOTE_C5,
NOTE_F5,
NOTE_F5,
NOTE_F5,
NOTE_E5,
NOTE_DS5,
NOTE_D5,
NOTE_B4,
NOTE_C5,
NOTE_E4,
NOTE_F4,
NOTE_G4,
NOTE_C4,
NOTE_E4,
NOTE_F4,
NOTE_GS4,
NOTE_F4,
NOTE_E4,
NOTE_GS4,
NOTE_GS4,
NOTE_GS4,
NOTE_GS4,
NOTE_AS4,
NOTE_G4,
NOTE_E4,
NOTE_E4,
NOTE_C4,
NOTE_GS4,
NOTE_GS4,
NOTE_GS4,
NOTE_GS4,
NOTE_AS4,
NOTE_G4,
NOTE_GS4,
NOTE_GS4,
NOTE_GS4,
NOTE_GS4,
NOTE_AS4,
NOTE_G4,
NOTE_E4,
NOTE_E4,
NOTE_C4,
NOTE_FS4,
NOTE_FS4,
NOTE_FS4,
NOTE_FS4,
NOTE_FS4,
NOTE_B4,
NOTE_G4,
NOTE_E4,
NOTE_C4,
NOTE_G3,
NOTE_C4,
NOTE_D4,
NOTE_CS4,
NOTE_C4,
NOTE_C4,
NOTE_G4,
NOTE_B4,
NOTE_C5,
NOTE_A4,
NOTE_B4,
NOTE_A4,
NOTE_E4,
NOTE_F4,
NOTE_D4,
NOTE_E4,
NOTE_C4,
NOTE_G3,
NOTE_C4,
NOTE_D4,
NOTE_CS4,
NOTE_C4,
NOTE_C4,
NOTE_G4,
NOTE_B4,
NOTE_C5,
NOTE_A4,
NOTE_B4,
NOTE_A4,
NOTE_E4,
NOTE_F4,
NOTE_D4,
NOTE_C5,
NOTE_A4,
NOTE_E4,
NOTE_E4,
NOTE_F4,
NOTE_C5,
NOTE_C5,
NOTE_F4,
NOTE_G4,
NOTE_F5,
NOTE_F5,
NOTE_F5,
NOTE_E5,
NOTE_D5,
NOTE_C5,
NOTE_A4,
NOTE_F4,
NOTE_E4,
NOTE_C5,
NOTE_A4,
NOTE_E4,
NOTE_E4,
NOTE_F4,
NOTE_C5,
NOTE_C5,
NOTE_F4,
NOTE_G4,
NOTE_D5,
NOTE_D5,
NOTE_D5,
NOTE_C5,
NOTE_B4,
NOTE_G4,
NOTE_E4,
NOTE_E4,
NOTE_C4,
NOTE_C5,
NOTE_A4,
NOTE_E4,
NOTE_E4,
NOTE_F4,
NOTE_C5,
NOTE_C5,
NOTE_F4,
NOTE_G4,
NOTE_F5,
NOTE_F5,
NOTE_F5,
NOTE_E5,
NOTE_D5,
NOTE_C5,
NOTE_A4,
NOTE_F4,
NOTE_E4,
NOTE_C5,
NOTE_A4,
NOTE_E4,
NOTE_E4,
NOTE_F4,
NOTE_C5,
NOTE_C5,
NOTE_F4,
NOTE_G4,
NOTE_D5,
NOTE_D5,
NOTE_D5,
NOTE_C5,
NOTE_B4,
NOTE_G4,
NOTE_E4,
NOTE_E4,
NOTE_C4,
NOTE_GS4,
NOTE_GS4,
NOTE_GS4,
NOTE_GS4,
NOTE_AS4,
NOTE_G4,
NOTE_E4,
NOTE_E4,
NOTE_C4,
NOTE_GS4,
NOTE_GS4,
NOTE_GS4,
NOTE_GS4,
NOTE_AS4,
NOTE_G4,
NOTE_GS4,
NOTE_GS4,
NOTE_GS4,
NOTE_GS4,
NOTE_AS4,
NOTE_G4,
NOTE_E4,
NOTE_E4,
NOTE_C4,
NOTE_FS4,
NOTE_FS4,
NOTE_FS4,
NOTE_FS4,
NOTE_FS4,
NOTE_B4,
NOTE_G4,
NOTE_C5,
NOTE_A4,
NOTE_E4,
NOTE_E4,
NOTE_F4,
NOTE_C5,
NOTE_C5,
NOTE_F4,
NOTE_G4,
NOTE_F5,
NOTE_F5,
NOTE_F5,
NOTE_E5,
NOTE_D5,
NOTE_C5,
NOTE_A4,
NOTE_F4,
NOTE_E4,
NOTE_C5,
NOTE_A4,
NOTE_E4,
NOTE_E4,
NOTE_F4,
NOTE_C5,
NOTE_C5,
NOTE_F4,
NOTE_G4,
NOTE_D5,
NOTE_D5,
NOTE_D5,
NOTE_C5,
NOTE_B4,
NOTE_G4,
NOTE_E4,
NOTE_E4,
NOTE_C4,
};

float start_time1[] = {
0.0,
142857.0,
428571.0,
714285.0,
857142.0,
1142856.0,
1714284.0,
2285712.0,
2714283.0,
3142854.0,
3571425.0,
3857139.0,
4142853.0,
4285710.0,
4571424.0,
4761900.0,
4952376.0,
5142852.0,
5428566.0,
5571423.0,
5857137.0,
6142851.0,
6285708.0,
6428565.0,
6857136.0,
7285707.0,
7714278.0,
8142849.0,
8428563.0,
8714277.0,
8857134.0,
9142848.0,
9333324.0,
9523800.0,
9714276.0,
9999990.0,
10142847.0,
10428561.0,
10714275.0,
10857132.0,
10999989.0,
11714274.0,
11857131.0,
11999988.0,
12142845.0,
12428559.0,
12714273.0,
12857130.0,
12999987.0,
13285701.0,
13428558.0,
13571415.0,
13999986.0,
14142843.0,
14285700.0,
14428557.0,
14714271.0,
14999985.0,
15285699.0,
15428556.0,
16285698.0,
16428555.0,
16571412.0,
16714269.0,
16999983.0,
17285697.0,
17428554.0,
17571411.0,
17857125.0,
17999982.0,
18142839.0,
18571410.0,
18999981.0,
19428552.0,
20857122.0,
20999979.0,
21142836.0,
21285693.0,
21571407.0,
21857121.0,
21999978.0,
22142835.0,
22428549.0,
22571406.0,
22714263.0,
23142834.0,
23285691.0,
23428548.0,
23571405.0,
23857119.0,
24142833.0,
24428547.0,
24571404.0,
25428546.0,
25571403.0,
25714260.0,
25857117.0,
26142831.0,
26428545.0,
26571402.0,
26714259.0,
26999973.0,
27142830.0,
27285687.0,
27714258.0,
28142829.0,
28571400.0,
29714256.0,
29857113.0,
30142827.0,
30428541.0,
30571398.0,
30857112.0,
30999969.0,
31285683.0,
31428540.0,
31999968.0,
32142825.0,
32428539.0,
32714253.0,
32857110.0,
32999967.0,
34285680.0,
34428537.0,
34714251.0,
34999965.0,
35142822.0,
35428536.0,
35571393.0,
35857107.0,
35999964.0,
36571392.0,
36714249.0,
36999963.0,
37285677.0,
37428534.0,
37714248.0,
38285676.0,
38857104.0,
39285675.0,
39714246.0,
40142817.0,
40428531.0,
40714245.0,
40857102.0,
41142816.0,
41333292.0,
41523768.0,
41714244.0,
41999958.0,
42142815.0,
42428529.0,
42714243.0,
42857100.0,
42999957.0,
43428528.0,
43857099.0,
44285670.0,
44714241.0,
44999955.0,
45285669.0,
45428526.0,
45714240.0,
45904716.0,
46095192.0,
46285668.0,
46571382.0,
46714239.0,
46999953.0,
47285667.0,
47428524.0,
47571381.0,
47999952.0,
48142809.0,
48428523.0,
48857094.0,
49142808.0,
49285665.0,
49571379.0,
49714236.0,
50285664.0,
50476140.0,
50666616.0,
50857092.0,
51047568.0,
51238044.0,
51428520.0,
51571377.0,
51857091.0,
51999948.0,
52571376.0,
52714233.0,
52999947.0,
53428518.0,
53714232.0,
53857089.0,
54142803.0,
54285660.0,
54857088.0,
54999945.0,
55285659.0,
55428516.0,
55618992.0,
55809468.0,
55999944.0,
56142801.0,
56428515.0,
56571372.0,
57142800.0,
57285657.0,
57571371.0,
57999942.0,
58285656.0,
58428513.0,
58714227.0,
58857084.0,
59428512.0,
59618988.0,
59809464.0,
59999940.0,
60190416.0,
60380892.0,
60571368.0,
60714225.0,
60999939.0,
61142796.0,
61714224.0,
61857081.0,
62142795.0,
62571366.0,
62857080.0,
62999937.0,
63285651.0,
63428508.0,
63999936.0,
64142793.0,
64428507.0,
64571364.0,
64761840.0,
64952316.0,
65142792.0,
65285649.0,
65571363.0,
65714220.0,
66285648.0,
66428505.0,
66714219.0,
66999933.0,
67142790.0,
67428504.0,
67571361.0,
67857075.0,
67999932.0,
68571360.0,
68714217.0,
68999931.0,
69285645.0,
69428502.0,
69571359.0,
70857072.0,
70999929.0,
71285643.0,
71571357.0,
71714214.0,
71999928.0,
72142785.0,
72428499.0,
72571356.0,
73142784.0,
73285641.0,
73571355.0,
73857069.0,
73999926.0,
74285640.0,
74857068.0,
75428496.0,
75571353.0,
75857067.0,
76285638.0,
76571352.0,
76714209.0,
76999923.0,
77142780.0,
77714208.0,
77904684.0,
78095160.0,
78285636.0,
78476112.0,
78666588.0,
78857064.0,
78999921.0,
79285635.0,
79428492.0,
79999920.0,
80142777.0,
80428491.0,
80857062.0,
81142776.0,
81285633.0,
81571347.0,
81714204.0,
82285632.0,
82428489.0,
82714203.0,
82857060.0,
83047536.0,
83238012.0,
83428488.0,
83571345.0,
83857059.0,
83999916.0,
};

float duration1[] = {
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
};

float end_time1[] = {
95238.0,
238095.0,
523809.0,
809523.0,
952380.0,
1238094.0,
1809522.0,
2380950.0,
2809521.0,
3238092.0,
3666663.0,
3952377.0,
4238091.0,
4380948.0,
4666662.0,
4857138.0,
5047614.0,
5238090.0,
5523804.0,
5666661.0,
5952375.0,
6238089.0,
6380946.0,
6523803.0,
6952374.0,
7380945.0,
7809516.0,
8238087.0,
8523801.0,
8809515.0,
8952372.0,
9238086.0,
9428562.0,
9619038.0,
9809514.0,
10095228.0,
10238085.0,
10523799.0,
10809513.0,
10952370.0,
11095227.0,
11809512.0,
11952369.0,
12095226.0,
12238083.0,
12523797.0,
12809511.0,
12952368.0,
13095225.0,
13380939.0,
13523796.0,
13666653.0,
14095224.0,
14238081.0,
14380938.0,
14523795.0,
14809509.0,
15095223.0,
15380937.0,
15523794.0,
16380936.0,
16523793.0,
16666650.0,
16809507.0,
17095221.0,
17380935.0,
17523792.0,
17666649.0,
17952363.0,
18095220.0,
18238077.0,
18666648.0,
19095219.0,
19523790.0,
20952360.0,
21095217.0,
21238074.0,
21380931.0,
21666645.0,
21952359.0,
22095216.0,
22238073.0,
22523787.0,
22666644.0,
22809501.0,
23238072.0,
23380929.0,
23523786.0,
23666643.0,
23952357.0,
24238071.0,
24523785.0,
24666642.0,
25523784.0,
25666641.0,
25809498.0,
25952355.0,
26238069.0,
26523783.0,
26666640.0,
26809497.0,
27095211.0,
27238068.0,
27380925.0,
27809496.0,
28238067.0,
28666638.0,
29809494.0,
29952351.0,
30238065.0,
30523779.0,
30666636.0,
30952350.0,
31095207.0,
31380921.0,
31523778.0,
32095206.0,
32238063.0,
32523777.0,
32809491.0,
32952348.0,
33095205.0,
34380918.0,
34523775.0,
34809489.0,
35095203.0,
35238060.0,
35523774.0,
35666631.0,
35952345.0,
36095202.0,
36666630.0,
36809487.0,
37095201.0,
37380915.0,
37523772.0,
37809486.0,
38380914.0,
38952342.0,
39380913.0,
39809484.0,
40238055.0,
40523769.0,
40809483.0,
40952340.0,
41238054.0,
41428530.0,
41619006.0,
41809482.0,
42095196.0,
42238053.0,
42523767.0,
42809481.0,
42952338.0,
43095195.0,
43523766.0,
43952337.0,
44380908.0,
44809479.0,
45095193.0,
45380907.0,
45523764.0,
45809478.0,
45999954.0,
46190430.0,
46380906.0,
46666620.0,
46809477.0,
47095191.0,
47380905.0,
47523762.0,
47666619.0,
48095190.0,
48238047.0,
48523761.0,
48952332.0,
49238046.0,
49380903.0,
49666617.0,
49809474.0,
50380902.0,
50571378.0,
50761854.0,
50952330.0,
51142806.0,
51333282.0,
51523758.0,
51666615.0,
51952329.0,
52095186.0,
52666614.0,
52809471.0,
53095185.0,
53523756.0,
53809470.0,
53952327.0,
54238041.0,
54380898.0,
54952326.0,
55095183.0,
55380897.0,
55523754.0,
55714230.0,
55904706.0,
56095182.0,
56238039.0,
56523753.0,
56666610.0,
57238038.0,
57380895.0,
57666609.0,
58095180.0,
58380894.0,
58523751.0,
58809465.0,
58952322.0,
59523750.0,
59714226.0,
59904702.0,
60095178.0,
60285654.0,
60476130.0,
60666606.0,
60809463.0,
61095177.0,
61238034.0,
61809462.0,
61952319.0,
62238033.0,
62666604.0,
62952318.0,
63095175.0,
63380889.0,
63523746.0,
64095174.0,
64238031.0,
64523745.0,
64666602.0,
64857078.0,
65047554.0,
65238030.0,
65380887.0,
65666601.0,
65809458.0,
66380886.0,
66523743.0,
66809457.0,
67095171.0,
67238028.0,
67523742.0,
67666599.0,
67952313.0,
68095170.0,
68666598.0,
68809455.0,
69095169.0,
69380883.0,
69523740.0,
69666597.0,
70952310.0,
71095167.0,
71380881.0,
71666595.0,
71809452.0,
72095166.0,
72238023.0,
72523737.0,
72666594.0,
73238022.0,
73380879.0,
73666593.0,
73952307.0,
74095164.0,
74380878.0,
74952306.0,
75523734.0,
75666591.0,
75952305.0,
76380876.0,
76666590.0,
76809447.0,
77095161.0,
77238018.0,
77809446.0,
77999922.0,
78190398.0,
78380874.0,
78571350.0,
78761826.0,
78952302.0,
79095159.0,
79380873.0,
79523730.0,
80095158.0,
80238015.0,
80523729.0,
80952300.0,
81238014.0,
81380871.0,
81666585.0,
81809442.0,
82380870.0,
82523727.0,
82809441.0,
82952298.0,
83142774.0,
83333250.0,
83523726.0,
83666583.0,
83952297.0,
84095154.0,
};

int melody2[] = {
NOTE_D3,
NOTE_D3,
NOTE_D3,
NOTE_D3,
NOTE_D3,
NOTE_G4,
NOTE_G3,
NOTE_G3,
NOTE_E3,
NOTE_C3,
NOTE_F3,
NOTE_G3,
NOTE_FS3,
NOTE_F3,
NOTE_E3,
NOTE_C4,
NOTE_E4,
NOTE_F4,
NOTE_D4,
NOTE_E4,
NOTE_C4,
NOTE_A3,
NOTE_B3,
NOTE_G3,
NOTE_G3,
NOTE_E3,
NOTE_C3,
NOTE_F3,
NOTE_G3,
NOTE_FS3,
NOTE_F3,
NOTE_E3,
NOTE_C4,
NOTE_E4,
NOTE_F4,
NOTE_D4,
NOTE_E4,
NOTE_C4,
NOTE_A3,
NOTE_B3,
NOTE_G3,
NOTE_C3,
NOTE_G3,
NOTE_C4,
NOTE_F3,
NOTE_C4,
NOTE_C4,
NOTE_F3,
NOTE_C3,
NOTE_E3,
NOTE_G3,
NOTE_C4,
NOTE_G5,
NOTE_G5,
NOTE_G5,
NOTE_G3,
NOTE_C3,
NOTE_G3,
NOTE_C4,
NOTE_F3,
NOTE_C4,
NOTE_C4,
NOTE_F3,
NOTE_C3,
NOTE_GS3,
NOTE_AS3,
NOTE_C4,
NOTE_G3,
NOTE_G3,
NOTE_C3,
NOTE_C3,
NOTE_G3,
NOTE_C4,
NOTE_F3,
NOTE_C4,
NOTE_C4,
NOTE_F3,
NOTE_C3,
NOTE_E3,
NOTE_G3,
NOTE_C4,
NOTE_G5,
NOTE_G5,
NOTE_G5,
NOTE_G3,
NOTE_C3,
NOTE_G3,
NOTE_C4,
NOTE_F3,
NOTE_C4,
NOTE_C4,
NOTE_F3,
NOTE_C3,
NOTE_GS3,
NOTE_AS3,
NOTE_C4,
NOTE_G3,
NOTE_G3,
NOTE_C3,
NOTE_GS2,
NOTE_DS3,
NOTE_GS3,
NOTE_G3,
NOTE_C3,
NOTE_G2,
NOTE_GS2,
NOTE_DS3,
NOTE_GS3,
NOTE_G3,
NOTE_C3,
NOTE_G2,
NOTE_GS2,
NOTE_DS3,
NOTE_GS3,
NOTE_G3,
NOTE_C3,
NOTE_G2,
NOTE_D3,
NOTE_D3,
NOTE_D3,
NOTE_D3,
NOTE_D3,
NOTE_G4,
NOTE_G3,
NOTE_G3,
NOTE_E3,
NOTE_C3,
NOTE_F3,
NOTE_G3,
NOTE_FS3,
NOTE_F3,
NOTE_E3,
NOTE_C4,
NOTE_E4,
NOTE_F4,
NOTE_D4,
NOTE_E4,
NOTE_C4,
NOTE_A3,
NOTE_B3,
NOTE_G3,
NOTE_G3,
NOTE_E3,
NOTE_C3,
NOTE_F3,
NOTE_G3,
NOTE_FS3,
NOTE_F3,
NOTE_E3,
NOTE_C4,
NOTE_E4,
NOTE_F4,
NOTE_D4,
NOTE_E4,
NOTE_C4,
NOTE_A3,
NOTE_B3,
NOTE_G3,
NOTE_C3,
NOTE_FS3,
NOTE_G3,
NOTE_C4,
NOTE_F3,
NOTE_F3,
NOTE_C4,
NOTE_C4,
NOTE_F3,
NOTE_D3,
NOTE_F3,
NOTE_G3,
NOTE_B3,
NOTE_G3,
NOTE_G3,
NOTE_C4,
NOTE_C4,
NOTE_G3,
NOTE_C3,
NOTE_FS3,
NOTE_G3,
NOTE_C4,
NOTE_F3,
NOTE_F3,
NOTE_C4,
NOTE_C4,
NOTE_F3,
NOTE_G3,
NOTE_G3,
NOTE_G3,
NOTE_G3,
NOTE_A3,
NOTE_B3,
NOTE_C4,
NOTE_G3,
NOTE_C3,
NOTE_C3,
NOTE_FS3,
NOTE_G3,
NOTE_C4,
NOTE_F3,
NOTE_F3,
NOTE_C4,
NOTE_C4,
NOTE_F3,
NOTE_D3,
NOTE_F3,
NOTE_G3,
NOTE_B3,
NOTE_G3,
NOTE_G3,
NOTE_C4,
NOTE_C4,
NOTE_G3,
NOTE_C3,
NOTE_FS3,
NOTE_G3,
NOTE_C4,
NOTE_F3,
NOTE_F3,
NOTE_C4,
NOTE_C4,
NOTE_F3,
NOTE_G3,
NOTE_G3,
NOTE_G3,
NOTE_G3,
NOTE_A3,
NOTE_B3,
NOTE_C4,
NOTE_G3,
NOTE_C3,
NOTE_GS2,
NOTE_DS3,
NOTE_GS3,
NOTE_G3,
NOTE_C3,
NOTE_G2,
NOTE_GS2,
NOTE_DS3,
NOTE_GS3,
NOTE_G3,
NOTE_C3,
NOTE_G2,
NOTE_GS2,
NOTE_DS3,
NOTE_GS3,
NOTE_G3,
NOTE_C3,
NOTE_G2,
NOTE_D3,
NOTE_D3,
NOTE_D3,
NOTE_D3,
NOTE_D3,
NOTE_G4,
NOTE_G3,
NOTE_C3,
NOTE_FS3,
NOTE_G3,
NOTE_C4,
NOTE_F3,
NOTE_F3,
NOTE_C4,
NOTE_C4,
NOTE_F3,
NOTE_D3,
NOTE_F3,
NOTE_G3,
NOTE_B3,
NOTE_G3,
NOTE_G3,
NOTE_C4,
NOTE_C4,
NOTE_G3,
NOTE_C3,
NOTE_FS3,
NOTE_G3,
NOTE_C4,
NOTE_F3,
NOTE_F3,
NOTE_C4,
NOTE_C4,
NOTE_F3,
NOTE_G3,
NOTE_G3,
NOTE_G3,
NOTE_G3,
NOTE_A3,
NOTE_B3,
NOTE_C4,
NOTE_G3,
NOTE_C3,
};

float start_time2[] = {
0.0,
142857.0,
428571.0,
714285.0,
857142.0,
1142856.0,
1714284.0,
2285712.0,
2714283.0,
3142854.0,
3571425.0,
3857139.0,
4142853.0,
4285710.0,
4571424.0,
4761900.0,
4952376.0,
5142852.0,
5428566.0,
5571423.0,
5857137.0,
6142851.0,
6285708.0,
6428565.0,
6857136.0,
7285707.0,
7714278.0,
8142849.0,
8428563.0,
8714277.0,
8857134.0,
9142848.0,
9333324.0,
9523800.0,
9714276.0,
9999990.0,
10142847.0,
10428561.0,
10714275.0,
10857132.0,
10999989.0,
11428560.0,
11857131.0,
12285702.0,
12571416.0,
12999987.0,
13142844.0,
13428558.0,
13714272.0,
14142843.0,
14571414.0,
14714271.0,
14999985.0,
15285699.0,
15428556.0,
15714270.0,
15999984.0,
16428555.0,
16857126.0,
17142840.0,
17571411.0,
17714268.0,
17999982.0,
18285696.0,
18571410.0,
18999981.0,
19428552.0,
19857123.0,
19999980.0,
20285694.0,
20571408.0,
20999979.0,
21428550.0,
21714264.0,
22142835.0,
22285692.0,
22571406.0,
22857120.0,
23285691.0,
23714262.0,
23857119.0,
24142833.0,
24428547.0,
24571404.0,
24857118.0,
25142832.0,
25571403.0,
25999974.0,
26285688.0,
26714259.0,
26857116.0,
27142830.0,
27428544.0,
27714258.0,
28142829.0,
28571400.0,
28999971.0,
29142828.0,
29428542.0,
29714256.0,
30142827.0,
30571398.0,
30857112.0,
31285683.0,
31714254.0,
31999968.0,
32428539.0,
32857110.0,
33142824.0,
33571395.0,
33999966.0,
34285680.0,
34714251.0,
35142822.0,
35428536.0,
35857107.0,
36285678.0,
36571392.0,
36714249.0,
36999963.0,
37285677.0,
37428534.0,
37714248.0,
38285676.0,
38857104.0,
39285675.0,
39714246.0,
40142817.0,
40428531.0,
40714245.0,
40857102.0,
41142816.0,
41333292.0,
41523768.0,
41714244.0,
41999958.0,
42142815.0,
42428529.0,
42714243.0,
42857100.0,
42999957.0,
43428528.0,
43857099.0,
44285670.0,
44714241.0,
44999955.0,
45285669.0,
45428526.0,
45714240.0,
45904716.0,
46095192.0,
46285668.0,
46571382.0,
46714239.0,
46999953.0,
47285667.0,
47428524.0,
47571381.0,
47999952.0,
48428523.0,
48571380.0,
48857094.0,
49142808.0,
49428522.0,
49714236.0,
49857093.0,
49999950.0,
50285664.0,
50714235.0,
50857092.0,
51142806.0,
51428520.0,
51714234.0,
51999948.0,
52142805.0,
52285662.0,
52571376.0,
52999947.0,
53142804.0,
53428518.0,
53714232.0,
53999946.0,
54285660.0,
54428517.0,
54571374.0,
54857088.0,
54999945.0,
55285659.0,
55428516.0,
55618992.0,
55809468.0,
55999944.0,
56285658.0,
56571372.0,
57142800.0,
57571371.0,
57714228.0,
57999942.0,
58285656.0,
58571370.0,
58857084.0,
58999941.0,
59142798.0,
59428512.0,
59857083.0,
59999940.0,
60285654.0,
60571368.0,
60857082.0,
61142796.0,
61285653.0,
61428510.0,
61714224.0,
62142795.0,
62285652.0,
62571366.0,
62857080.0,
63142794.0,
63428508.0,
63571365.0,
63714222.0,
63999936.0,
64142793.0,
64428507.0,
64571364.0,
64761840.0,
64952316.0,
65142792.0,
65428506.0,
65714220.0,
66285648.0,
66714219.0,
67142790.0,
67428504.0,
67857075.0,
68285646.0,
68571360.0,
68999931.0,
69428502.0,
69714216.0,
70142787.0,
70571358.0,
70857072.0,
71285643.0,
71714214.0,
71999928.0,
72428499.0,
72857070.0,
73142784.0,
73285641.0,
73571355.0,
73857069.0,
73999926.0,
74285640.0,
74857068.0,
75428496.0,
75857067.0,
75999924.0,
76285638.0,
76571352.0,
76857066.0,
77142780.0,
77285637.0,
77428494.0,
77714208.0,
78142779.0,
78285636.0,
78571350.0,
78857064.0,
79142778.0,
79428492.0,
79571349.0,
79714206.0,
79999920.0,
80428491.0,
80571348.0,
80857062.0,
81142776.0,
81428490.0,
81714204.0,
81857061.0,
81999918.0,
82285632.0,
82428489.0,
82714203.0,
82857060.0,
83047536.0,
83238012.0,
83428488.0,
83714202.0,
83999916.0,
};

float duration2[] = {
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
95238.0,
};

float end_time2[] = {
95238.0,
238095.0,
523809.0,
809523.0,
952380.0,
1238094.0,
1809522.0,
2380950.0,
2809521.0,
3238092.0,
3666663.0,
3952377.0,
4238091.0,
4380948.0,
4666662.0,
4857138.0,
5047614.0,
5238090.0,
5523804.0,
5666661.0,
5952375.0,
6238089.0,
6380946.0,
6523803.0,
6952374.0,
7380945.0,
7809516.0,
8238087.0,
8523801.0,
8809515.0,
8952372.0,
9238086.0,
9428562.0,
9619038.0,
9809514.0,
10095228.0,
10238085.0,
10523799.0,
10809513.0,
10952370.0,
11095227.0,
11523798.0,
11952369.0,
12380940.0,
12666654.0,
13095225.0,
13238082.0,
13523796.0,
13809510.0,
14238081.0,
14666652.0,
14809509.0,
15095223.0,
15380937.0,
15523794.0,
15809508.0,
16095222.0,
16523793.0,
16952364.0,
17238078.0,
17666649.0,
17809506.0,
18095220.0,
18380934.0,
18666648.0,
19095219.0,
19523790.0,
19952361.0,
20095218.0,
20380932.0,
20666646.0,
21095217.0,
21523788.0,
21809502.0,
22238073.0,
22380930.0,
22666644.0,
22952358.0,
23380929.0,
23809500.0,
23952357.0,
24238071.0,
24523785.0,
24666642.0,
24952356.0,
25238070.0,
25666641.0,
26095212.0,
26380926.0,
26809497.0,
26952354.0,
27238068.0,
27523782.0,
27809496.0,
28238067.0,
28666638.0,
29095209.0,
29238066.0,
29523780.0,
29809494.0,
30238065.0,
30666636.0,
30952350.0,
31380921.0,
31809492.0,
32095206.0,
32523777.0,
32952348.0,
33238062.0,
33666633.0,
34095204.0,
34380918.0,
34809489.0,
35238060.0,
35523774.0,
35952345.0,
36380916.0,
36666630.0,
36809487.0,
37095201.0,
37380915.0,
37523772.0,
37809486.0,
38380914.0,
38952342.0,
39380913.0,
39809484.0,
40238055.0,
40523769.0,
40809483.0,
40952340.0,
41238054.0,
41428530.0,
41619006.0,
41809482.0,
42095196.0,
42238053.0,
42523767.0,
42809481.0,
42952338.0,
43095195.0,
43523766.0,
43952337.0,
44380908.0,
44809479.0,
45095193.0,
45380907.0,
45523764.0,
45809478.0,
45999954.0,
46190430.0,
46380906.0,
46666620.0,
46809477.0,
47095191.0,
47380905.0,
47523762.0,
47666619.0,
48095190.0,
48523761.0,
48666618.0,
48952332.0,
49238046.0,
49523760.0,
49809474.0,
49952331.0,
50095188.0,
50380902.0,
50809473.0,
50952330.0,
51238044.0,
51523758.0,
51809472.0,
52095186.0,
52238043.0,
52380900.0,
52666614.0,
53095185.0,
53238042.0,
53523756.0,
53809470.0,
54095184.0,
54380898.0,
54523755.0,
54666612.0,
54952326.0,
55095183.0,
55380897.0,
55523754.0,
55714230.0,
55904706.0,
56095182.0,
56380896.0,
56666610.0,
57238038.0,
57666609.0,
57809466.0,
58095180.0,
58380894.0,
58666608.0,
58952322.0,
59095179.0,
59238036.0,
59523750.0,
59952321.0,
60095178.0,
60380892.0,
60666606.0,
60952320.0,
61238034.0,
61380891.0,
61523748.0,
61809462.0,
62238033.0,
62380890.0,
62666604.0,
62952318.0,
63238032.0,
63523746.0,
63666603.0,
63809460.0,
64095174.0,
64238031.0,
64523745.0,
64666602.0,
64857078.0,
65047554.0,
65238030.0,
65523744.0,
65809458.0,
66380886.0,
66809457.0,
67238028.0,
67523742.0,
67952313.0,
68380884.0,
68666598.0,
69095169.0,
69523740.0,
69809454.0,
70238025.0,
70666596.0,
70952310.0,
71380881.0,
71809452.0,
72095166.0,
72523737.0,
72952308.0,
73238022.0,
73380879.0,
73666593.0,
73952307.0,
74095164.0,
74380878.0,
74952306.0,
75523734.0,
75952305.0,
76095162.0,
76380876.0,
76666590.0,
76952304.0,
77238018.0,
77380875.0,
77523732.0,
77809446.0,
78238017.0,
78380874.0,
78666588.0,
78952302.0,
79238016.0,
79523730.0,
79666587.0,
79809444.0,
80095158.0,
80523729.0,
80666586.0,
80952300.0,
81238014.0,
81523728.0,
81809442.0,
81952299.0,
82095156.0,
82380870.0,
82523727.0,
82809441.0,
82952298.0,
83142774.0,
83333250.0,
83523726.0,
83809440.0,
84095154.0,
};


int main_cycle_usec = 10;
int master_time = 0;

int notepin0 = 3;
int notepin2 = 5;
int notepin1 = 25;

int elapsed0 = 0;
int elapsed1 = 0;
int elapsed2 = 0;

int state0 = 0;
int state1 = 0;
int state2 = 0;

void setup() {
  Serial.begin(9600);
  pinMode(13, OUTPUT);
  pinMode(notepin0, OUTPUT);
  pinMode(notepin1, OUTPUT);
  pinMode(notepin2, OUTPUT);

  digitalWrite(13, HIGH);
  delay(500);
  digitalWrite(13, LOW);
  delay(500);
  digitalWrite(13, HIGH);
  delay(500);
  digitalWrite(13, LOW);
  delay(500);
//  tone(3, 40);
//  tone(9, 440);
  
}

float current_time;

int size0 = sizeof(melody0)/sizeof(melody0[0]);
int size1 = sizeof(melody1)/sizeof(melody1[0]);
int size2 = sizeof(melody2)/sizeof(melody2[0]);


void loop() {
  Serial.println(size0);
  Serial.println(size1);
  Serial.println(size2);
  
  int usec2 = 0;//(1000000/freq2)/2;

  int end0 = 0;
  int end1 = 0;
  int end2 = 0;

  int i = -1;
  int j = -1;
  int k = -1;
    
  int note0_active = 0;
  float note0_start = 0;
  float note0_end = micros();
  float wait_time0 = 0;
  
  int note1_active = 0;
  float note1_start = 0;
  float note1_end = micros();
  float wait_time1 = 0;
  
  int note2_active = 0;
  float note2_start = 0;
  float note2_end = micros();
  float wait_time2 = 0;

  float start_time = micros();

  while(1){

    current_time = micros();


    // ### VOICE 0 ### //
        
    if (!note0_active){
      // Check if voice is already done, do nothing if True
      if (end0){
        i;
      }
      // Check if note needs to start
      else if ((current_time - note0_end) >= wait_time0){
        i++;
//        Serial.print("I: ");
//        Serial.println(i);
        note0_active = 1;
        analogWriteFrequency(notepin0, melody0[i]);
        analogWrite(notepin0, 128);
        note0_start = micros();
      }
    }
    else{
      // Check if note needs to end      
      if ((current_time - note0_start) >= duration0[i]){
        note0_active = 0;
        analogWrite(notepin0, 0);

        // Check if already at song end
        if (i+1 == size0){
//          Serial.println("END0");
          end0 = 1;
        }
        else{
          note0_end = micros();
          wait_time0 = start_time0[i+1] - (start_time0[i] + duration0[i]); // consider hardcoding this to reduce cycle time
        }
      }  
    }



    // ### VOICE 1 ### //
    
    if (!note1_active){
      // Check if voice is already done, do nothing if True
      if (end1){
        j;
      }
      // Check if note needs to start
      else if ((current_time - note1_end) >= wait_time1){
        j++;
//        Serial.print("J: ");
//        Serial.println(j);
        note1_active = 1;
        analogWriteFrequency(notepin1, melody1[j]);
        analogWrite(notepin1, 128);
        note1_start = micros();
      }
    }
    else{
      // Check if note needs to end      
      if ((current_time - note1_start) >= duration1[j]){
        note1_active = 0;
        analogWrite(notepin1, 0);

        // Check if already at song end
        if (j+1 == size1){
//          Serial.println("END1");
          end1 = 1;
        }
        else{
          note1_end = micros();
          wait_time1 = start_time1[j+1] - (start_time1[j] + duration1[j]); // consider hardcoding this to reduce cycle time
        }
      }
    }


    // ### VOICE 2 ### //

    if (!note2_active){
      // Check if voice is already done, do nothing if True
      if (end2){
        k;
      }
      // Check if note needs to start
      else if ((current_time - note2_end) >= wait_time2){
        k++;
//        Serial.print("k: ");
//        Serial.println(k);
        note2_active = 1;
        analogWriteFrequency(notepin2, melody2[k]);
        analogWrite(notepin2, 128);
        note2_start = micros();
      }
    }
    else{
      // Check if note needs to end      
      if ((current_time - note2_start) >= duration2[k]){
        note2_active = 0;
        analogWrite(notepin2, 0);

        // Check if already at song end
        if (k+1 == size2){
//          Serial.println("END2");
          end2 = 1;
        }
        else{
          note2_end = micros();
          wait_time2 = start_time2[k+1] - (start_time2[k] + duration2[k]); // consider hardcoding this to reduce cycle time
        }
      }
    }
//
//    if (!note2_active){
//      // Check if voice is already done, do nothing if True
//      if (end2){
//        k;
//      }
//      // Check if note needs to start
//      else if ((current_time - note2_end) >= wait_time2){
//        k++;
////        Serial.print("K: ");
////        Serial.println(k);
//        note2_active = 1;
//        digitalWrite(notepin2, HIGH);
//        elapsed2 = 0;
//        note2_start = micros();
//        usec2 = (1000000/melody2[k])/2;
//      }
//    }
//    else{
//      // Check if note needs to end      
//      if ((current_time - note2_start) >= duration2[k]){
//        note2_active = 0;
//        digitalWrite(notepin2, LOW);
//
//        // Check if already at song end
//        if (k+1 == size2){
////          Serial.println("END2");
//          end2 = 1;
//        }
//        else{
//          note2_end = micros();
//          wait_time2 = start_time2[k+1] - (start_time2[k] + duration2[k]); // consider hardcoding this to reduce cycle time
//        }
//      }

//      // If didn't end, check proper note state and set if needed
//      if (elapsed2 > usec2){
//        state2 = !state2;
//        digitalWrite(notepin2, state2);
//        elapsed2 = 0;
//      }      
//    }

    // If all voices are finished, break out of while loop and play song again
    if (end0 & end1 & end2){
      break;
    }

//    elapsed2 += main_cycle_usec;
    delayMicroseconds(main_cycle_usec);
  }

  digitalWrite(13, HIGH);
  delay(500);
  digitalWrite(13, LOW);
  delay(500);
  digitalWrite(13, HIGH);
  delay(500);
  digitalWrite(13, LOW);
  delay(500);
}
