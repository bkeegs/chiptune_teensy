#include <pitches.h>

int melody0[] = {
NOTE_E3,
NOTE_G3,
NOTE_B3,
NOTE_D4,
NOTE_G3,
NOTE_G3,
NOTE_G3,
NOTE_G3,
NOTE_G3,
NOTE_G3,
NOTE_G3,
NOTE_A3,
NOTE_A3,
NOTE_A3,
NOTE_A3,
NOTE_A3,
NOTE_FS3,
NOTE_D4,
NOTE_B3,
NOTE_D4,
NOTE_C4,
NOTE_F4,
NOTE_C4,
NOTE_D4,
NOTE_F4,
NOTE_E4,
NOTE_DS4,
NOTE_D4,
NOTE_C4,
NOTE_B3,
NOTE_C4,
NOTE_D4,
NOTE_B3,
NOTE_D4,
NOTE_C4,
NOTE_E4,
NOTE_E4,
NOTE_C4,
NOTE_B3,
NOTE_F4,
NOTE_E4,
NOTE_C4,
NOTE_D4,
NOTE_B3,
NOTE_C4,
NOTE_D4,
NOTE_D4,
NOTE_B3,
NOTE_D4,
NOTE_C4,
NOTE_F4,
NOTE_C4,
NOTE_D4,
NOTE_F4,
NOTE_E4,
NOTE_DS4,
NOTE_D4,
NOTE_C4,
NOTE_B3,
NOTE_C4,
NOTE_D4,
NOTE_B3,
NOTE_D4,
NOTE_C4,
NOTE_C4,
NOTE_E4,
NOTE_D4,
NOTE_F4,
NOTE_G4,
NOTE_D4,
NOTE_G4,
NOTE_G4,
NOTE_A4,
NOTE_E4,
NOTE_A4,
NOTE_C5,
NOTE_D4,
NOTE_E4,
NOTE_F4,
NOTE_G4,
NOTE_F4,
NOTE_E4,
NOTE_F4,
NOTE_G4,
NOTE_C5,
NOTE_CS5,
NOTE_D5,
NOTE_D3,
NOTE_D3,
NOTE_D3,
NOTE_D3,
NOTE_D3,
NOTE_D3,
NOTE_D3,
NOTE_D3,
NOTE_D3,
NOTE_D3,
NOTE_D3,
NOTE_D3,
NOTE_D3,
NOTE_D3,
NOTE_D3,
NOTE_D3,
NOTE_D3,
NOTE_C5,
NOTE_C5,
NOTE_CS5,
NOTE_D5,
NOTE_D3,
NOTE_D3,
NOTE_D3,
NOTE_D3,
NOTE_D3,
NOTE_D3,
NOTE_D3,
NOTE_D3,
NOTE_D3,
NOTE_D3,
NOTE_D3,
NOTE_D3,
NOTE_D3,
NOTE_D3,
NOTE_D3,
NOTE_D3,
NOTE_D3,
NOTE_E4,
NOTE_E4,
NOTE_CS4,
NOTE_D4,
NOTE_B3,
NOTE_D4,
NOTE_C4,
NOTE_F4,
NOTE_C4,
NOTE_D4,
NOTE_F4,
NOTE_E4,
NOTE_DS4,
NOTE_D4,
NOTE_C4,
NOTE_B3,
NOTE_C4,
NOTE_D4,
NOTE_B3,
NOTE_D4,
NOTE_C4,
NOTE_E4,
NOTE_E4,
NOTE_C4,
NOTE_B3,
NOTE_F4,
NOTE_E4,
NOTE_C4,
NOTE_D4,
NOTE_B3,
NOTE_C4,
NOTE_D4,
NOTE_D4,
NOTE_B3,
NOTE_D4,
NOTE_C4,
NOTE_F4,
NOTE_C4,
NOTE_D4,
NOTE_F4,
NOTE_E4,
NOTE_DS4,
NOTE_D4,
NOTE_C4,
NOTE_B3,
NOTE_C4,
NOTE_D4,
NOTE_B3,
NOTE_D4,
NOTE_C4,
NOTE_C4,
NOTE_E4,
NOTE_D4,
NOTE_F4,
NOTE_G4,
NOTE_D4,
NOTE_G4,
NOTE_G4,
NOTE_A4,
NOTE_E4,
NOTE_A4,
NOTE_C5,
NOTE_D4,
NOTE_E4,
NOTE_F4,
NOTE_G4,
NOTE_F4,
NOTE_E4,
NOTE_F4,
NOTE_G4,
NOTE_C5,
NOTE_CS5,
NOTE_D5,
NOTE_D3,
NOTE_D3,
NOTE_D3,
NOTE_D3,
NOTE_D3,
NOTE_D3,
NOTE_D3,
NOTE_D3,
NOTE_D3,
NOTE_D3,
NOTE_D3,
NOTE_D3,
NOTE_D3,
NOTE_D3,
NOTE_D3,
NOTE_D3,
NOTE_D3,
NOTE_C5,
NOTE_C5,
NOTE_CS5,
NOTE_D5,
NOTE_D3,
NOTE_D3,
NOTE_D3,
NOTE_D3,
NOTE_D3,
NOTE_D3,
NOTE_D3,
NOTE_D3,
NOTE_D3,
NOTE_D3,
NOTE_D3,
NOTE_D3,
NOTE_D3,
NOTE_D3,
NOTE_D3,
NOTE_D3,
NOTE_D3,
NOTE_E4,
NOTE_E4,
NOTE_CS4,
};

float start_time0[] = {
0.0,
111111.0,
222222.0,
333333.0,
444444.0,
888888.0,
1555554.0,
1666665.0,
1777776.0,
2222220.0,
2666664.0,
3111108.0,
3259256.0,
3407404.0,
3555552.0,
3703700.0,
3851848.0,
3999996.0,
4666662.0,
4888884.0,
5777772.0,
6444438.0,
7111104.0,
7555548.0,
8444436.0,
9111102.0,
9222213.0,
9333324.0,
10222212.0,
10518508.0,
10814804.0,
11111100.0,
11777766.0,
11999988.0,
12888876.0,
13777764.0,
14074060.0,
14370356.0,
14666652.0,
15555540.0,
15851836.0,
16148132.0,
16444428.0,
17555538.0,
17777760.0,
17999982.0,
18222204.0,
18888870.0,
19111092.0,
19999980.0,
20666646.0,
21333312.0,
21777756.0,
22666644.0,
23333310.0,
23444421.0,
23555532.0,
24444420.0,
24740716.0,
25037012.0,
25333308.0,
25999974.0,
26222196.0,
27111084.0,
27777750.0,
28444416.0,
28888860.0,
29555526.0,
29777748.0,
29999970.0,
30444414.0,
30666636.0,
31333302.0,
31777746.0,
31999968.0,
32222190.0,
32444412.0,
33777744.0,
34222188.0,
35111076.0,
35555520.0,
35999964.0,
37333296.0,
37777740.0,
38666628.0,
39111072.0,
39555516.0,
39777738.0,
39888849.0,
39999960.0,
40222182.0,
40333293.0,
40444404.0,
40666626.0,
40777737.0,
40888848.0,
41111070.0,
41222181.0,
41333292.0,
41555514.0,
41666625.0,
41777736.0,
41999958.0,
42111069.0,
42222180.0,
42518476.0,
42814772.0,
43111068.0,
43333290.0,
43444401.0,
43555512.0,
43777734.0,
43888845.0,
43999956.0,
44222178.0,
44333289.0,
44444400.0,
44666622.0,
44777733.0,
44888844.0,
45111066.0,
45222177.0,
45333288.0,
45555510.0,
45666621.0,
45777732.0,
46074028.0,
46370324.0,
46666620.0,
47333286.0,
47555508.0,
48444396.0,
49111062.0,
49777728.0,
50222172.0,
51111060.0,
51777726.0,
51888837.0,
51999948.0,
52888836.0,
53185132.0,
53481428.0,
53777724.0,
54444390.0,
54666612.0,
55555500.0,
56444388.0,
56740684.0,
57036980.0,
57333276.0,
58222164.0,
58518460.0,
58814756.0,
59111052.0,
60222162.0,
60444384.0,
60666606.0,
60888828.0,
61555494.0,
61777716.0,
62666604.0,
63333270.0,
63999936.0,
64444380.0,
65333268.0,
65999934.0,
66111045.0,
66222156.0,
67111044.0,
67407340.0,
67703636.0,
67999932.0,
68666598.0,
68888820.0,
69777708.0,
70444374.0,
71111040.0,
71555484.0,
72222150.0,
72444372.0,
72666594.0,
73111038.0,
73333260.0,
73999926.0,
74444370.0,
74666592.0,
74888814.0,
75111036.0,
76444368.0,
76888812.0,
77777700.0,
78222144.0,
78666588.0,
79999920.0,
80444364.0,
81333252.0,
81777696.0,
82222140.0,
82444362.0,
82555473.0,
82666584.0,
82888806.0,
82999917.0,
83111028.0,
83333250.0,
83444361.0,
83555472.0,
83777694.0,
83888805.0,
83999916.0,
84222138.0,
84333249.0,
84444360.0,
84666582.0,
84777693.0,
84888804.0,
85185100.0,
85481396.0,
85777692.0,
85999914.0,
86111025.0,
86222136.0,
86444358.0,
86555469.0,
86666580.0,
86888802.0,
86999913.0,
87111024.0,
87333246.0,
87444357.0,
87555468.0,
87777690.0,
87888801.0,
87999912.0,
88222134.0,
88333245.0,
88444356.0,
88740652.0,
89036948.0,
};

float duration0[] = {
111111.0,
111111.0,
111111.0,
111111.0,
222222.0,
222222.0,
111111.0,
111111.0,
222222.0,
222222.0,
222222.0,
148148.0,
148148.0,
148148.0,
148148.0,
148148.0,
148148.0,
666666.0,
222222.0,
888888.0,
666666.0,
666666.0,
444444.0,
888888.0,
666666.0,
111111.0,
111111.0,
888888.0,
296296.0,
296296.0,
296296.0,
666666.0,
222222.0,
888888.0,
888888.0,
296296.0,
296296.0,
296296.0,
888888.0,
296296.0,
296296.0,
296296.0,
1111110.0,
222222.0,
222222.0,
222222.0,
666666.0,
222222.0,
888888.0,
666666.0,
666666.0,
444444.0,
888888.0,
666666.0,
111111.0,
111111.0,
888888.0,
296296.0,
296296.0,
296296.0,
666666.0,
222222.0,
888888.0,
666666.0,
666666.0,
444444.0,
666666.0,
222222.0,
222222.0,
444444.0,
222222.0,
666666.0,
444444.0,
222222.0,
222222.0,
222222.0,
1333332.0,
444444.0,
888888.0,
444444.0,
444444.0,
1333332.0,
444444.0,
888888.0,
444444.0,
444444.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
296296.0,
296296.0,
296296.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
296296.0,
296296.0,
296296.0,
666666.0,
222222.0,
888888.0,
666666.0,
666666.0,
444444.0,
888888.0,
666666.0,
111111.0,
111111.0,
888888.0,
296296.0,
296296.0,
296296.0,
666666.0,
222222.0,
888888.0,
888888.0,
296296.0,
296296.0,
296296.0,
888888.0,
296296.0,
296296.0,
296296.0,
1111110.0,
222222.0,
222222.0,
222222.0,
666666.0,
222222.0,
888888.0,
666666.0,
666666.0,
444444.0,
888888.0,
666666.0,
111111.0,
111111.0,
888888.0,
296296.0,
296296.0,
296296.0,
666666.0,
222222.0,
888888.0,
666666.0,
666666.0,
444444.0,
666666.0,
222222.0,
222222.0,
444444.0,
222222.0,
666666.0,
444444.0,
222222.0,
222222.0,
222222.0,
1333332.0,
444444.0,
888888.0,
444444.0,
444444.0,
1333332.0,
444444.0,
888888.0,
444444.0,
444444.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
296296.0,
296296.0,
296296.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
296296.0,
296296.0,
296296.0,
};

float end_time0[] = {
111111.0,
222222.0,
333333.0,
444444.0,
666666.0,
1111110.0,
1666665.0,
1777776.0,
1999998.0,
2444442.0,
2888886.0,
3259256.0,
3407404.0,
3555552.0,
3703700.0,
3851848.0,
3999996.0,
4666662.0,
4888884.0,
5777772.0,
6444438.0,
7111104.0,
7555548.0,
8444436.0,
9111102.0,
9222213.0,
9333324.0,
10222212.0,
10518508.0,
10814804.0,
11111100.0,
11777766.0,
11999988.0,
12888876.0,
13777764.0,
14074060.0,
14370356.0,
14666652.0,
15555540.0,
15851836.0,
16148132.0,
16444428.0,
17555538.0,
17777760.0,
17999982.0,
18222204.0,
18888870.0,
19111092.0,
19999980.0,
20666646.0,
21333312.0,
21777756.0,
22666644.0,
23333310.0,
23444421.0,
23555532.0,
24444420.0,
24740716.0,
25037012.0,
25333308.0,
25999974.0,
26222196.0,
27111084.0,
27777750.0,
28444416.0,
28888860.0,
29555526.0,
29777748.0,
29999970.0,
30444414.0,
30666636.0,
31333302.0,
31777746.0,
31999968.0,
32222190.0,
32444412.0,
33777744.0,
34222188.0,
35111076.0,
35555520.0,
35999964.0,
37333296.0,
37777740.0,
38666628.0,
39111072.0,
39555516.0,
39666627.0,
39888849.0,
39999960.0,
40111071.0,
40333293.0,
40444404.0,
40555515.0,
40777737.0,
40888848.0,
40999959.0,
41222181.0,
41333292.0,
41444403.0,
41666625.0,
41777736.0,
41888847.0,
42111069.0,
42222180.0,
42518476.0,
42814772.0,
43111068.0,
43222179.0,
43444401.0,
43555512.0,
43666623.0,
43888845.0,
43999956.0,
44111067.0,
44333289.0,
44444400.0,
44555511.0,
44777733.0,
44888844.0,
44999955.0,
45222177.0,
45333288.0,
45444399.0,
45666621.0,
45777732.0,
46074028.0,
46370324.0,
46666620.0,
47333286.0,
47555508.0,
48444396.0,
49111062.0,
49777728.0,
50222172.0,
51111060.0,
51777726.0,
51888837.0,
51999948.0,
52888836.0,
53185132.0,
53481428.0,
53777724.0,
54444390.0,
54666612.0,
55555500.0,
56444388.0,
56740684.0,
57036980.0,
57333276.0,
58222164.0,
58518460.0,
58814756.0,
59111052.0,
60222162.0,
60444384.0,
60666606.0,
60888828.0,
61555494.0,
61777716.0,
62666604.0,
63333270.0,
63999936.0,
64444380.0,
65333268.0,
65999934.0,
66111045.0,
66222156.0,
67111044.0,
67407340.0,
67703636.0,
67999932.0,
68666598.0,
68888820.0,
69777708.0,
70444374.0,
71111040.0,
71555484.0,
72222150.0,
72444372.0,
72666594.0,
73111038.0,
73333260.0,
73999926.0,
74444370.0,
74666592.0,
74888814.0,
75111036.0,
76444368.0,
76888812.0,
77777700.0,
78222144.0,
78666588.0,
79999920.0,
80444364.0,
81333252.0,
81777696.0,
82222140.0,
82333251.0,
82555473.0,
82666584.0,
82777695.0,
82999917.0,
83111028.0,
83222139.0,
83444361.0,
83555472.0,
83666583.0,
83888805.0,
83999916.0,
84111027.0,
84333249.0,
84444360.0,
84555471.0,
84777693.0,
84888804.0,
85185100.0,
85481396.0,
85777692.0,
85888803.0,
86111025.0,
86222136.0,
86333247.0,
86555469.0,
86666580.0,
86777691.0,
86999913.0,
87111024.0,
87222135.0,
87444357.0,
87555468.0,
87666579.0,
87888801.0,
87999912.0,
88111023.0,
88333245.0,
88444356.0,
88740652.0,
89036948.0,
89333244.0,
};

int melody1[] = {
NOTE_G3,
NOTE_B3,
NOTE_D4,
NOTE_FS4,
NOTE_G4,
NOTE_G4,
NOTE_G4,
NOTE_G4,
NOTE_G4,
NOTE_G4,
NOTE_G4,
NOTE_F4,
NOTE_F4,
NOTE_F4,
NOTE_F4,
NOTE_F4,
NOTE_FS4,
NOTE_G4,
NOTE_B4,
NOTE_D5,
NOTE_A3,
NOTE_F3,
NOTE_F5,
NOTE_E5,
NOTE_DS5,
NOTE_D5,
NOTE_A3,
NOTE_B3,
NOTE_G4,
NOTE_B4,
NOTE_D5,
NOTE_A3,
NOTE_F3,
NOTE_C5,
NOTE_B4,
NOTE_C5,
NOTE_D5,
NOTE_D3,
NOTE_D3,
NOTE_FS3,
NOTE_G3,
NOTE_G4,
NOTE_B4,
NOTE_D5,
NOTE_A3,
NOTE_F3,
NOTE_F5,
NOTE_E5,
NOTE_DS5,
NOTE_D5,
NOTE_C4,
NOTE_A3,
NOTE_B3,
NOTE_G3,
NOTE_F3,
NOTE_G4,
NOTE_B4,
NOTE_D5,
NOTE_G3,
NOTE_F3,
NOTE_A3,
NOTE_F5,
NOTE_E5,
NOTE_F5,
NOTE_G5,
NOTE_AS5,
NOTE_G5,
NOTE_A5,
NOTE_AS5,
NOTE_F5,
NOTE_F5,
NOTE_D4,
NOTE_AS5,
NOTE_B5,
NOTE_C6,
NOTE_G5,
NOTE_G5,
NOTE_E4,
NOTE_C6,
NOTE_CS6,
NOTE_D6,
NOTE_D5,
NOTE_D5,
NOTE_D5,
NOTE_D5,
NOTE_D5,
NOTE_D5,
NOTE_C6,
NOTE_C6,
NOTE_CS6,
NOTE_D6,
NOTE_D5,
NOTE_D5,
NOTE_D5,
NOTE_D5,
NOTE_D5,
NOTE_D5,
NOTE_D5,
NOTE_C6,
NOTE_C6,
NOTE_B5,
NOTE_G4,
NOTE_B4,
NOTE_D5,
NOTE_A3,
NOTE_F3,
NOTE_F5,
NOTE_E5,
NOTE_DS5,
NOTE_D5,
NOTE_A3,
NOTE_B3,
NOTE_G4,
NOTE_B4,
NOTE_D5,
NOTE_A3,
NOTE_F3,
NOTE_C5,
NOTE_B4,
NOTE_C5,
NOTE_D5,
NOTE_D3,
NOTE_D3,
NOTE_FS3,
NOTE_G3,
NOTE_G4,
NOTE_B4,
NOTE_D5,
NOTE_A3,
NOTE_F3,
NOTE_F5,
NOTE_E5,
NOTE_DS5,
NOTE_D5,
NOTE_C4,
NOTE_A3,
NOTE_B3,
NOTE_G3,
NOTE_F3,
NOTE_G4,
NOTE_B4,
NOTE_D5,
NOTE_G3,
NOTE_F3,
NOTE_A3,
NOTE_F5,
NOTE_E5,
NOTE_F5,
NOTE_G5,
NOTE_AS5,
NOTE_G5,
NOTE_A5,
NOTE_AS5,
NOTE_F5,
NOTE_F5,
NOTE_D4,
NOTE_AS5,
NOTE_B5,
NOTE_C6,
NOTE_G5,
NOTE_G5,
NOTE_E4,
NOTE_C6,
NOTE_CS6,
NOTE_D6,
NOTE_D5,
NOTE_D5,
NOTE_D5,
NOTE_D5,
NOTE_D5,
NOTE_D5,
NOTE_C6,
NOTE_C6,
NOTE_CS6,
NOTE_D6,
NOTE_D5,
NOTE_D5,
NOTE_D5,
NOTE_D5,
NOTE_D5,
NOTE_D5,
NOTE_D5,
NOTE_C6,
NOTE_C6,
NOTE_B5,
};

float start_time1[] = {
0.0,
111111.0,
222222.0,
333333.0,
444444.0,
888888.0,
1555554.0,
1666665.0,
1777776.0,
2222220.0,
2666664.0,
3111108.0,
3259256.0,
3407404.0,
3555552.0,
3703700.0,
3851848.0,
3999996.0,
4666662.0,
4888884.0,
5777772.0,
6222216.0,
6666660.0,
7333326.0,
7444437.0,
7555548.0,
8444436.0,
9333324.0,
11111100.0,
11777766.0,
11999988.0,
12888876.0,
13555542.0,
13777764.0,
14074060.0,
14370356.0,
14666652.0,
15555540.0,
16222206.0,
16333317.0,
16444428.0,
18222204.0,
18888870.0,
19111092.0,
19999980.0,
20222202.0,
20888868.0,
21555534.0,
21666645.0,
21777756.0,
22666644.0,
22888866.0,
23555532.0,
24222198.0,
24444420.0,
25333308.0,
25999974.0,
26222196.0,
27111084.0,
27407380.0,
27703676.0,
27999972.0,
28296268.0,
28592564.0,
28888860.0,
29555526.0,
29777748.0,
31555524.0,
32444412.0,
33111078.0,
33333300.0,
34222188.0,
35111076.0,
35555520.0,
35999964.0,
36666630.0,
36888852.0,
37777740.0,
38666628.0,
39111072.0,
39555516.0,
39888849.0,
40333293.0,
40777737.0,
41222181.0,
41666625.0,
42111069.0,
42222180.0,
42518476.0,
42814772.0,
43111068.0,
43444401.0,
43888845.0,
44333289.0,
44777733.0,
44888844.0,
45222177.0,
45666621.0,
45777732.0,
46074028.0,
46370324.0,
46666620.0,
47333286.0,
47555508.0,
48444396.0,
48888840.0,
49333284.0,
49999950.0,
50111061.0,
50222172.0,
51111060.0,
51999948.0,
53777724.0,
54444390.0,
54666612.0,
55555500.0,
56222166.0,
56444388.0,
56740684.0,
57036980.0,
57333276.0,
58222164.0,
58888830.0,
58999941.0,
59111052.0,
60888828.0,
61555494.0,
61777716.0,
62666604.0,
62888826.0,
63555492.0,
64222158.0,
64333269.0,
64444380.0,
65333268.0,
65555490.0,
66222156.0,
66888822.0,
67111044.0,
67999932.0,
68666598.0,
68888820.0,
69777708.0,
70074004.0,
70370300.0,
70666596.0,
70962892.0,
71259188.0,
71555484.0,
72222150.0,
72444372.0,
74222148.0,
75111036.0,
75777702.0,
75999924.0,
76888812.0,
77777700.0,
78222144.0,
78666588.0,
79333254.0,
79555476.0,
80444364.0,
81333252.0,
81777696.0,
82222140.0,
82555473.0,
82999917.0,
83444361.0,
83888805.0,
84333249.0,
84777693.0,
84888804.0,
85185100.0,
85481396.0,
85777692.0,
86111025.0,
86555469.0,
86999913.0,
87444357.0,
87555468.0,
87888801.0,
88333245.0,
88444356.0,
88740652.0,
89036948.0,
};

float duration1[] = {
111111.0,
111111.0,
111111.0,
111111.0,
222222.0,
222222.0,
111111.0,
111111.0,
222222.0,
222222.0,
222222.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
666666.0,
222222.0,
888888.0,
444444.0,
444444.0,
666666.0,
111111.0,
111111.0,
888888.0,
888888.0,
888888.0,
666666.0,
222222.0,
888888.0,
666666.0,
222222.0,
296296.0,
296296.0,
296296.0,
888888.0,
666666.0,
111111.0,
111111.0,
888888.0,
666666.0,
222222.0,
888888.0,
222222.0,
666666.0,
666666.0,
111111.0,
111111.0,
888888.0,
222222.0,
666666.0,
666666.0,
222222.0,
888888.0,
666666.0,
222222.0,
888888.0,
296296.0,
296296.0,
296296.0,
296296.0,
296296.0,
296296.0,
666666.0,
222222.0,
1777776.0,
888888.0,
666666.0,
222222.0,
888888.0,
888888.0,
444444.0,
444444.0,
666666.0,
222222.0,
888888.0,
888888.0,
444444.0,
444444.0,
222222.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
296296.0,
296296.0,
296296.0,
222222.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
296296.0,
296296.0,
296296.0,
666666.0,
222222.0,
888888.0,
444444.0,
444444.0,
666666.0,
111111.0,
111111.0,
888888.0,
888888.0,
888888.0,
666666.0,
222222.0,
888888.0,
666666.0,
222222.0,
296296.0,
296296.0,
296296.0,
888888.0,
666666.0,
111111.0,
111111.0,
888888.0,
666666.0,
222222.0,
888888.0,
222222.0,
666666.0,
666666.0,
111111.0,
111111.0,
888888.0,
222222.0,
666666.0,
666666.0,
222222.0,
888888.0,
666666.0,
222222.0,
888888.0,
296296.0,
296296.0,
296296.0,
296296.0,
296296.0,
296296.0,
666666.0,
222222.0,
1777776.0,
888888.0,
666666.0,
222222.0,
888888.0,
888888.0,
444444.0,
444444.0,
666666.0,
222222.0,
888888.0,
888888.0,
444444.0,
444444.0,
222222.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
296296.0,
296296.0,
296296.0,
222222.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
296296.0,
296296.0,
296296.0,
};

float end_time1[] = {
111111.0,
222222.0,
333333.0,
444444.0,
666666.0,
1111110.0,
1666665.0,
1777776.0,
1999998.0,
2444442.0,
2888886.0,
3222219.0,
3370367.0,
3518515.0,
3666663.0,
3814811.0,
3962959.0,
4666662.0,
4888884.0,
5777772.0,
6222216.0,
6666660.0,
7333326.0,
7444437.0,
7555548.0,
8444436.0,
9333324.0,
10222212.0,
11777766.0,
11999988.0,
12888876.0,
13555542.0,
13777764.0,
14074060.0,
14370356.0,
14666652.0,
15555540.0,
16222206.0,
16333317.0,
16444428.0,
17333316.0,
18888870.0,
19111092.0,
19999980.0,
20222202.0,
20888868.0,
21555534.0,
21666645.0,
21777756.0,
22666644.0,
22888866.0,
23555532.0,
24222198.0,
24444420.0,
25333308.0,
25999974.0,
26222196.0,
27111084.0,
27407380.0,
27703676.0,
27999972.0,
28296268.0,
28592564.0,
28888860.0,
29555526.0,
29777748.0,
31555524.0,
32444412.0,
33111078.0,
33333300.0,
34222188.0,
35111076.0,
35555520.0,
35999964.0,
36666630.0,
36888852.0,
37777740.0,
38666628.0,
39111072.0,
39555516.0,
39777738.0,
39999960.0,
40444404.0,
40888848.0,
41333292.0,
41777736.0,
42222180.0,
42518476.0,
42814772.0,
43111068.0,
43333290.0,
43555512.0,
43999956.0,
44444400.0,
44888844.0,
44999955.0,
45333288.0,
45777732.0,
46074028.0,
46370324.0,
46666620.0,
47333286.0,
47555508.0,
48444396.0,
48888840.0,
49333284.0,
49999950.0,
50111061.0,
50222172.0,
51111060.0,
51999948.0,
52888836.0,
54444390.0,
54666612.0,
55555500.0,
56222166.0,
56444388.0,
56740684.0,
57036980.0,
57333276.0,
58222164.0,
58888830.0,
58999941.0,
59111052.0,
59999940.0,
61555494.0,
61777716.0,
62666604.0,
62888826.0,
63555492.0,
64222158.0,
64333269.0,
64444380.0,
65333268.0,
65555490.0,
66222156.0,
66888822.0,
67111044.0,
67999932.0,
68666598.0,
68888820.0,
69777708.0,
70074004.0,
70370300.0,
70666596.0,
70962892.0,
71259188.0,
71555484.0,
72222150.0,
72444372.0,
74222148.0,
75111036.0,
75777702.0,
75999924.0,
76888812.0,
77777700.0,
78222144.0,
78666588.0,
79333254.0,
79555476.0,
80444364.0,
81333252.0,
81777696.0,
82222140.0,
82444362.0,
82666584.0,
83111028.0,
83555472.0,
83999916.0,
84444360.0,
84888804.0,
85185100.0,
85481396.0,
85777692.0,
85999914.0,
86222136.0,
86666580.0,
87111024.0,
87555468.0,
87666579.0,
87999912.0,
88444356.0,
88740652.0,
89036948.0,
89333244.0,
};

int melody2[] = {
NOTE_G3,
NOTE_D3,
NOTE_G3,
NOTE_G3,
NOTE_G3,
NOTE_G3,
NOTE_G3,
NOTE_G3,
NOTE_G3,
NOTE_F3,
NOTE_F3,
NOTE_F3,
NOTE_F3,
NOTE_F3,
NOTE_A3,
NOTE_G3,
NOTE_D3,
NOTE_G3,
NOTE_D3,
NOTE_G3,
NOTE_D3,
NOTE_F3,
NOTE_C3,
NOTE_F3,
NOTE_C3,
NOTE_F3,
NOTE_C3,
NOTE_G3,
NOTE_D3,
NOTE_G3,
NOTE_D3,
NOTE_G3,
NOTE_D3,
NOTE_G3,
NOTE_D3,
NOTE_G3,
NOTE_D3,
NOTE_G3,
NOTE_D3,
NOTE_G3,
NOTE_D3,
NOTE_G3,
NOTE_D3,
NOTE_G3,
NOTE_D3,
NOTE_F3,
NOTE_C3,
NOTE_F3,
NOTE_C3,
NOTE_F3,
NOTE_C3,
NOTE_G3,
NOTE_D3,
NOTE_G3,
NOTE_D3,
NOTE_G3,
NOTE_D3,
NOTE_G3,
NOTE_D3,
NOTE_G3,
NOTE_D3,
NOTE_G3,
NOTE_D3,
NOTE_G3,
NOTE_D3,
NOTE_G3,
NOTE_D3,
NOTE_G3,
NOTE_D3,
NOTE_F3,
NOTE_C3,
NOTE_F3,
NOTE_C3,
NOTE_F3,
NOTE_C3,
NOTE_G3,
NOTE_D3,
NOTE_G3,
NOTE_D3,
NOTE_G3,
NOTE_D3,
NOTE_G3,
NOTE_D3,
NOTE_G3,
NOTE_D3,
NOTE_G3,
NOTE_D3,
NOTE_G3,
NOTE_D3,
NOTE_G3,
NOTE_D3,
NOTE_G3,
NOTE_D3,
NOTE_F3,
NOTE_C3,
NOTE_F3,
NOTE_C3,
NOTE_F3,
NOTE_C3,
NOTE_G3,
NOTE_D3,
NOTE_G3,
NOTE_D3,
NOTE_G3,
NOTE_D3,
NOTE_G3,
NOTE_D3,
NOTE_A3,
NOTE_F3,
NOTE_A3,
NOTE_F3,
NOTE_AS3,
NOTE_F3,
NOTE_AS3,
NOTE_F3,
NOTE_AS3,
NOTE_F3,
NOTE_AS3,
NOTE_F3,
NOTE_AS3,
NOTE_F3,
NOTE_B3,
NOTE_FS3,
NOTE_C4,
NOTE_G3,
NOTE_C4,
NOTE_G3,
NOTE_C4,
NOTE_G3,
NOTE_C4,
NOTE_G3,
NOTE_C4,
NOTE_G3,
NOTE_CS4,
NOTE_GS3,
NOTE_D4,
NOTE_FS5,
NOTE_F5,
NOTE_B4,
NOTE_G6,
NOTE_FS6,
NOTE_D6,
NOTE_AS5,
NOTE_G5,
NOTE_D5,
NOTE_B4,
NOTE_C4,
NOTE_C4,
NOTE_CS4,
NOTE_D4,
NOTE_G6,
NOTE_FS6,
NOTE_D6,
NOTE_FS5,
NOTE_F5,
NOTE_B4,
NOTE_C4,
NOTE_C4,
NOTE_B3,
NOTE_G3,
NOTE_D3,
NOTE_G3,
NOTE_D3,
NOTE_G3,
NOTE_D3,
NOTE_F3,
NOTE_C3,
NOTE_F3,
NOTE_C3,
NOTE_F3,
NOTE_C3,
NOTE_G3,
NOTE_D3,
NOTE_G3,
NOTE_D3,
NOTE_G3,
NOTE_D3,
NOTE_G3,
NOTE_D3,
NOTE_G3,
NOTE_D3,
NOTE_G3,
NOTE_D3,
NOTE_G3,
NOTE_D3,
NOTE_G3,
NOTE_D3,
NOTE_G3,
NOTE_D3,
NOTE_F3,
NOTE_C3,
NOTE_F3,
NOTE_C3,
NOTE_F3,
NOTE_C3,
NOTE_G3,
NOTE_D3,
NOTE_G3,
NOTE_D3,
NOTE_G3,
NOTE_D3,
NOTE_G3,
NOTE_D3,
NOTE_G3,
NOTE_D3,
NOTE_G3,
NOTE_D3,
NOTE_G3,
NOTE_D3,
NOTE_G3,
NOTE_D3,
NOTE_G3,
NOTE_D3,
NOTE_F3,
NOTE_C3,
NOTE_F3,
NOTE_C3,
NOTE_F3,
NOTE_C3,
NOTE_G3,
NOTE_D3,
NOTE_G3,
NOTE_D3,
NOTE_G3,
NOTE_D3,
NOTE_G3,
NOTE_D3,
NOTE_G3,
NOTE_D3,
NOTE_G3,
NOTE_D3,
NOTE_G3,
NOTE_D3,
NOTE_G3,
NOTE_D3,
NOTE_G3,
NOTE_D3,
NOTE_F3,
NOTE_C3,
NOTE_F3,
NOTE_C3,
NOTE_F3,
NOTE_C3,
NOTE_G3,
NOTE_D3,
NOTE_G3,
NOTE_D3,
NOTE_G3,
NOTE_D3,
NOTE_G3,
NOTE_D3,
NOTE_A3,
NOTE_F3,
NOTE_A3,
NOTE_F3,
NOTE_AS3,
NOTE_F3,
NOTE_AS3,
NOTE_F3,
NOTE_AS3,
NOTE_F3,
NOTE_AS3,
NOTE_F3,
NOTE_AS3,
NOTE_F3,
NOTE_B3,
NOTE_FS3,
NOTE_C4,
NOTE_G3,
NOTE_C4,
NOTE_G3,
NOTE_C4,
NOTE_G3,
NOTE_C4,
NOTE_G3,
NOTE_C4,
NOTE_G3,
NOTE_CS4,
NOTE_GS3,
NOTE_D4,
NOTE_FS5,
NOTE_F5,
NOTE_B4,
NOTE_G6,
NOTE_FS6,
NOTE_D6,
NOTE_AS5,
NOTE_G5,
NOTE_D5,
NOTE_B4,
NOTE_C4,
NOTE_C4,
NOTE_CS4,
NOTE_D4,
NOTE_G6,
NOTE_FS6,
NOTE_D6,
NOTE_FS5,
NOTE_F5,
NOTE_B4,
NOTE_C4,
NOTE_C4,
NOTE_B3,
};

float start_time2[] = {
0.0,
222222.0,
444444.0,
888888.0,
1555554.0,
1666665.0,
1777776.0,
2222220.0,
2666664.0,
3111108.0,
3259256.0,
3407404.0,
3555552.0,
3703700.0,
3851848.0,
3999996.0,
4444440.0,
4666662.0,
5111106.0,
5333328.0,
5555550.0,
5777772.0,
6222216.0,
6444438.0,
6888882.0,
7111104.0,
7333326.0,
7555548.0,
7999992.0,
8222214.0,
8666658.0,
8888880.0,
9111102.0,
9333324.0,
9777768.0,
9999990.0,
10444434.0,
10666656.0,
10888878.0,
11111100.0,
11555544.0,
11777766.0,
12222210.0,
12444432.0,
12666654.0,
12888876.0,
13333320.0,
13555542.0,
13999986.0,
14222208.0,
14444430.0,
14666652.0,
15111096.0,
15333318.0,
15777762.0,
15999984.0,
16222206.0,
16444428.0,
16888872.0,
17111094.0,
17555538.0,
17777760.0,
17999982.0,
18222204.0,
18666648.0,
18888870.0,
19333314.0,
19555536.0,
19777758.0,
19999980.0,
20444424.0,
20666646.0,
21111090.0,
21333312.0,
21555534.0,
21777756.0,
22222200.0,
22444422.0,
22888866.0,
23111088.0,
23333310.0,
23555532.0,
23999976.0,
24222198.0,
24666642.0,
24888864.0,
25111086.0,
25333308.0,
25777752.0,
25999974.0,
26444418.0,
26666640.0,
26888862.0,
27111084.0,
27555528.0,
27777750.0,
28222194.0,
28444416.0,
28666638.0,
28888860.0,
29333304.0,
29555526.0,
29999970.0,
30222192.0,
30444414.0,
30666636.0,
31111080.0,
31333302.0,
31777746.0,
31999968.0,
32222190.0,
32444412.0,
32888856.0,
33111078.0,
33555522.0,
33777744.0,
33999966.0,
34222188.0,
34666632.0,
34888854.0,
35333298.0,
35555520.0,
35777742.0,
35999964.0,
36444408.0,
36666630.0,
37111074.0,
37333296.0,
37555518.0,
37777740.0,
38222184.0,
38444406.0,
38888850.0,
39111072.0,
39333294.0,
39555516.0,
40222182.0,
40333293.0,
40444404.0,
41111070.0,
41222181.0,
41333292.0,
41444403.0,
41555514.0,
41666625.0,
41777736.0,
42222180.0,
42518476.0,
42814772.0,
43111068.0,
43777734.0,
43888845.0,
43999956.0,
44666622.0,
44777733.0,
44888844.0,
45777732.0,
46074028.0,
46370324.0,
46666620.0,
47111064.0,
47333286.0,
47777730.0,
47999952.0,
48222174.0,
48444396.0,
48888840.0,
49111062.0,
49555506.0,
49777728.0,
49999950.0,
50222172.0,
50666616.0,
50888838.0,
51333282.0,
51555504.0,
51777726.0,
51999948.0,
52444392.0,
52666614.0,
53111058.0,
53333280.0,
53555502.0,
53777724.0,
54222168.0,
54444390.0,
54888834.0,
55111056.0,
55333278.0,
55555500.0,
55999944.0,
56222166.0,
56666610.0,
56888832.0,
57111054.0,
57333276.0,
57777720.0,
57999942.0,
58444386.0,
58666608.0,
58888830.0,
59111052.0,
59555496.0,
59777718.0,
60222162.0,
60444384.0,
60666606.0,
60888828.0,
61333272.0,
61555494.0,
61999938.0,
62222160.0,
62444382.0,
62666604.0,
63111048.0,
63333270.0,
63777714.0,
63999936.0,
64222158.0,
64444380.0,
64888824.0,
65111046.0,
65555490.0,
65777712.0,
65999934.0,
66222156.0,
66666600.0,
66888822.0,
67333266.0,
67555488.0,
67777710.0,
67999932.0,
68444376.0,
68666598.0,
69111042.0,
69333264.0,
69555486.0,
69777708.0,
70222152.0,
70444374.0,
70888818.0,
71111040.0,
71333262.0,
71555484.0,
71999928.0,
72222150.0,
72666594.0,
72888816.0,
73111038.0,
73333260.0,
73777704.0,
73999926.0,
74444370.0,
74666592.0,
74888814.0,
75111036.0,
75555480.0,
75777702.0,
76222146.0,
76444368.0,
76666590.0,
76888812.0,
77333256.0,
77555478.0,
77999922.0,
78222144.0,
78444366.0,
78666588.0,
79111032.0,
79333254.0,
79777698.0,
79999920.0,
80222142.0,
80444364.0,
80888808.0,
81111030.0,
81555474.0,
81777696.0,
81999918.0,
82222140.0,
82888806.0,
82999917.0,
83111028.0,
83777694.0,
83888805.0,
83999916.0,
84111027.0,
84222138.0,
84333249.0,
84444360.0,
84888804.0,
85185100.0,
85481396.0,
85777692.0,
86444358.0,
86555469.0,
86666580.0,
87333246.0,
87444357.0,
87555468.0,
88444356.0,
88740652.0,
89036948.0,
};

float duration2[] = {
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
444444.0,
222222.0,
444444.0,
222222.0,
222222.0,
222222.0,
444444.0,
222222.0,
444444.0,
222222.0,
222222.0,
222222.0,
444444.0,
222222.0,
444444.0,
222222.0,
222222.0,
222222.0,
444444.0,
222222.0,
444444.0,
222222.0,
222222.0,
222222.0,
444444.0,
222222.0,
444444.0,
222222.0,
222222.0,
222222.0,
444444.0,
222222.0,
444444.0,
222222.0,
222222.0,
222222.0,
444444.0,
222222.0,
444444.0,
222222.0,
222222.0,
222222.0,
444444.0,
222222.0,
444444.0,
222222.0,
222222.0,
222222.0,
444444.0,
222222.0,
444444.0,
222222.0,
222222.0,
222222.0,
444444.0,
222222.0,
444444.0,
222222.0,
222222.0,
222222.0,
444444.0,
222222.0,
444444.0,
222222.0,
222222.0,
222222.0,
444444.0,
222222.0,
444444.0,
222222.0,
222222.0,
222222.0,
444444.0,
222222.0,
444444.0,
222222.0,
222222.0,
222222.0,
444444.0,
222222.0,
444444.0,
222222.0,
222222.0,
222222.0,
444444.0,
222222.0,
444444.0,
222222.0,
222222.0,
222222.0,
444444.0,
222222.0,
444444.0,
222222.0,
222222.0,
222222.0,
444444.0,
222222.0,
444444.0,
222222.0,
222222.0,
222222.0,
444444.0,
222222.0,
444444.0,
222222.0,
222222.0,
222222.0,
444444.0,
222222.0,
444444.0,
222222.0,
222222.0,
222222.0,
444444.0,
222222.0,
444444.0,
222222.0,
222222.0,
222222.0,
222222.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
296296.0,
296296.0,
296296.0,
222222.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
296296.0,
296296.0,
296296.0,
444444.0,
222222.0,
444444.0,
222222.0,
222222.0,
222222.0,
444444.0,
222222.0,
444444.0,
222222.0,
222222.0,
222222.0,
444444.0,
222222.0,
444444.0,
222222.0,
222222.0,
222222.0,
444444.0,
222222.0,
444444.0,
222222.0,
222222.0,
222222.0,
444444.0,
222222.0,
444444.0,
222222.0,
222222.0,
222222.0,
444444.0,
222222.0,
444444.0,
222222.0,
222222.0,
222222.0,
444444.0,
222222.0,
444444.0,
222222.0,
222222.0,
222222.0,
444444.0,
222222.0,
444444.0,
222222.0,
222222.0,
222222.0,
444444.0,
222222.0,
444444.0,
222222.0,
222222.0,
222222.0,
444444.0,
222222.0,
444444.0,
222222.0,
222222.0,
222222.0,
444444.0,
222222.0,
444444.0,
222222.0,
222222.0,
222222.0,
444444.0,
222222.0,
444444.0,
222222.0,
222222.0,
222222.0,
444444.0,
222222.0,
444444.0,
222222.0,
222222.0,
222222.0,
444444.0,
222222.0,
444444.0,
222222.0,
222222.0,
222222.0,
444444.0,
222222.0,
444444.0,
222222.0,
222222.0,
222222.0,
444444.0,
222222.0,
444444.0,
222222.0,
222222.0,
222222.0,
444444.0,
222222.0,
444444.0,
222222.0,
222222.0,
222222.0,
444444.0,
222222.0,
444444.0,
222222.0,
222222.0,
222222.0,
444444.0,
222222.0,
444444.0,
222222.0,
222222.0,
222222.0,
444444.0,
222222.0,
444444.0,
222222.0,
222222.0,
222222.0,
222222.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
296296.0,
296296.0,
296296.0,
222222.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
111111.0,
296296.0,
296296.0,
296296.0,
};

float end_time2[] = {
111111.0,
333333.0,
555555.0,
999999.0,
1666665.0,
1777776.0,
1888887.0,
2333331.0,
2777775.0,
3222219.0,
3370367.0,
3518515.0,
3666663.0,
3814811.0,
3962959.0,
4444440.0,
4666662.0,
5111106.0,
5333328.0,
5555550.0,
5777772.0,
6222216.0,
6444438.0,
6888882.0,
7111104.0,
7333326.0,
7555548.0,
7999992.0,
8222214.0,
8666658.0,
8888880.0,
9111102.0,
9333324.0,
9777768.0,
9999990.0,
10444434.0,
10666656.0,
10888878.0,
11111100.0,
11555544.0,
11777766.0,
12222210.0,
12444432.0,
12666654.0,
12888876.0,
13333320.0,
13555542.0,
13999986.0,
14222208.0,
14444430.0,
14666652.0,
15111096.0,
15333318.0,
15777762.0,
15999984.0,
16222206.0,
16444428.0,
16888872.0,
17111094.0,
17555538.0,
17777760.0,
17999982.0,
18222204.0,
18666648.0,
18888870.0,
19333314.0,
19555536.0,
19777758.0,
19999980.0,
20444424.0,
20666646.0,
21111090.0,
21333312.0,
21555534.0,
21777756.0,
22222200.0,
22444422.0,
22888866.0,
23111088.0,
23333310.0,
23555532.0,
23999976.0,
24222198.0,
24666642.0,
24888864.0,
25111086.0,
25333308.0,
25777752.0,
25999974.0,
26444418.0,
26666640.0,
26888862.0,
27111084.0,
27555528.0,
27777750.0,
28222194.0,
28444416.0,
28666638.0,
28888860.0,
29333304.0,
29555526.0,
29999970.0,
30222192.0,
30444414.0,
30666636.0,
31111080.0,
31333302.0,
31777746.0,
31999968.0,
32222190.0,
32444412.0,
32888856.0,
33111078.0,
33555522.0,
33777744.0,
33999966.0,
34222188.0,
34666632.0,
34888854.0,
35333298.0,
35555520.0,
35777742.0,
35999964.0,
36444408.0,
36666630.0,
37111074.0,
37333296.0,
37555518.0,
37777740.0,
38222184.0,
38444406.0,
38888850.0,
39111072.0,
39333294.0,
39555516.0,
39777738.0,
40333293.0,
40444404.0,
40555515.0,
41222181.0,
41333292.0,
41444403.0,
41555514.0,
41666625.0,
41777736.0,
41888847.0,
42518476.0,
42814772.0,
43111068.0,
43333290.0,
43888845.0,
43999956.0,
44111067.0,
44777733.0,
44888844.0,
44999955.0,
46074028.0,
46370324.0,
46666620.0,
47111064.0,
47333286.0,
47777730.0,
47999952.0,
48222174.0,
48444396.0,
48888840.0,
49111062.0,
49555506.0,
49777728.0,
49999950.0,
50222172.0,
50666616.0,
50888838.0,
51333282.0,
51555504.0,
51777726.0,
51999948.0,
52444392.0,
52666614.0,
53111058.0,
53333280.0,
53555502.0,
53777724.0,
54222168.0,
54444390.0,
54888834.0,
55111056.0,
55333278.0,
55555500.0,
55999944.0,
56222166.0,
56666610.0,
56888832.0,
57111054.0,
57333276.0,
57777720.0,
57999942.0,
58444386.0,
58666608.0,
58888830.0,
59111052.0,
59555496.0,
59777718.0,
60222162.0,
60444384.0,
60666606.0,
60888828.0,
61333272.0,
61555494.0,
61999938.0,
62222160.0,
62444382.0,
62666604.0,
63111048.0,
63333270.0,
63777714.0,
63999936.0,
64222158.0,
64444380.0,
64888824.0,
65111046.0,
65555490.0,
65777712.0,
65999934.0,
66222156.0,
66666600.0,
66888822.0,
67333266.0,
67555488.0,
67777710.0,
67999932.0,
68444376.0,
68666598.0,
69111042.0,
69333264.0,
69555486.0,
69777708.0,
70222152.0,
70444374.0,
70888818.0,
71111040.0,
71333262.0,
71555484.0,
71999928.0,
72222150.0,
72666594.0,
72888816.0,
73111038.0,
73333260.0,
73777704.0,
73999926.0,
74444370.0,
74666592.0,
74888814.0,
75111036.0,
75555480.0,
75777702.0,
76222146.0,
76444368.0,
76666590.0,
76888812.0,
77333256.0,
77555478.0,
77999922.0,
78222144.0,
78444366.0,
78666588.0,
79111032.0,
79333254.0,
79777698.0,
79999920.0,
80222142.0,
80444364.0,
80888808.0,
81111030.0,
81555474.0,
81777696.0,
81999918.0,
82222140.0,
82444362.0,
82999917.0,
83111028.0,
83222139.0,
83888805.0,
83999916.0,
84111027.0,
84222138.0,
84333249.0,
84444360.0,
84555471.0,
85185100.0,
85481396.0,
85777692.0,
85999914.0,
86555469.0,
86666580.0,
86777691.0,
87444357.0,
87555468.0,
87666579.0,
88740652.0,
89036948.0,
89333244.0,
};



int main_cycle_usec = 10;
int master_time = 0;

int notepin0 = 25;
int notepin2 = 5;
int notepin1 = 3;

int elapsed0 = 0;
int elapsed1 = 0;
int elapsed2 = 0;

int state0 = 0;
int state1 = 0;
int state2 = 0;

void setup() {
  Serial.begin(9600);
  pinMode(13, OUTPUT);
  pinMode(notepin0, OUTPUT);
  pinMode(notepin1, OUTPUT);
  pinMode(notepin2, OUTPUT);

  digitalWrite(13, HIGH);
  delay(500);
  digitalWrite(13, LOW);
  delay(500);
  digitalWrite(13, HIGH);
  delay(500);
  digitalWrite(13, LOW);
  delay(500);
//  tone(3, 40);
//  tone(9, 440);
  
}

float current_time;

int size0 = sizeof(melody0)/sizeof(melody0[0]);
int size1 = sizeof(melody1)/sizeof(melody1[0]);
int size2 = sizeof(melody2)/sizeof(melody2[0]);


void loop() {
  Serial.println(size0);
  Serial.println(size1);
  Serial.println(size2);
  
  int usec2 = 0;//(1000000/freq2)/2;

  int end0 = 0;
  int end1 = 0;
  int end2 = 0;

  int i = -1;
  int j = -1;
  int k = -1;
    
  int note0_active = 0;
  float note0_start = 0;
  float note0_end = micros();
  float wait_time0 = 0;
  
  int note1_active = 0;
  float note1_start = 0;
  float note1_end = micros();
  float wait_time1 = 0;
  
  int note2_active = 0;
  float note2_start = 0;
  float note2_end = micros();
  float wait_time2 = 0;

  float start_time = micros();

  while(1){

    current_time = micros();


    // ### VOICE 0 ### //
        
    if (!note0_active){
      // Check if voice is already done, do nothing if True
      if (end0){
        i;
      }
      // Check if note needs to start
      else if ((current_time - note0_end) >= wait_time0){
        i++;
//        Serial.print("I: ");
//        Serial.println(i);
        note0_active = 1;
        analogWriteFrequency(notepin0, melody0[i]);
        analogWrite(notepin0, 128);
        note0_start = micros();
      }
    }
    else{
      // Check if note needs to end      
      if ((current_time - note0_start) >= duration0[i]){
        note0_active = 0;
        analogWrite(notepin0, 0);

        // Check if already at song end
        if (i+1 == size0){
//          Serial.println("END0");
          end0 = 1;
        }
        else{
          note0_end = micros();
          wait_time0 = start_time0[i+1] - (start_time0[i] + duration0[i]); // consider hardcoding this to reduce cycle time
        }
      }  
    }



    // ### VOICE 1 ### //
    
    if (!note1_active){
      // Check if voice is already done, do nothing if True
      if (end1){
        j;
      }
      // Check if note needs to start
      else if ((current_time - note1_end) >= wait_time1){
        j++;
//        Serial.print("J: ");
//        Serial.println(j);
        note1_active = 1;
        analogWriteFrequency(notepin1, melody1[j]);
        analogWrite(notepin1, 128);
        note1_start = micros();
      }
    }
    else{
      // Check if note needs to end      
      if ((current_time - note1_start) >= duration1[j]){
        note1_active = 0;
        analogWrite(notepin1, 0);

        // Check if already at song end
        if (j+1 == size1){
//          Serial.println("END1");
          end1 = 1;
        }
        else{
          note1_end = micros();
          wait_time1 = start_time1[j+1] - (start_time1[j] + duration1[j]); // consider hardcoding this to reduce cycle time
        }
      }
    }


    // ### VOICE 2 ### //

    if (!note2_active){
      // Check if voice is already done, do nothing if True
      if (end2){
        k;
      }
      // Check if note needs to start
      else if ((current_time - note2_end) >= wait_time2){
        k++;
//        Serial.print("k: ");
//        Serial.println(k);
        note2_active = 1;
        analogWriteFrequency(notepin2, melody2[k]);
        analogWrite(notepin2, 128);
        note2_start = micros();
      }
    }
    else{
      // Check if note needs to end      
      if ((current_time - note2_start) >= duration2[k]){
        note2_active = 0;
        analogWrite(notepin2, 0);

        // Check if already at song end
        if (k+1 == size2){
//          Serial.println("END2");
          end2 = 1;
        }
        else{
          note2_end = micros();
          wait_time2 = start_time2[k+1] - (start_time2[k] + duration2[k]); // consider hardcoding this to reduce cycle time
        }
      }
    }
//
//    if (!note2_active){
//      // Check if voice is already done, do nothing if True
//      if (end2){
//        k;
//      }
//      // Check if note needs to start
//      else if ((current_time - note2_end) >= wait_time2){
//        k++;
////        Serial.print("K: ");
////        Serial.println(k);
//        note2_active = 1;
//        digitalWrite(notepin2, HIGH);
//        elapsed2 = 0;
//        note2_start = micros();
//        usec2 = (1000000/melody2[k])/2;
//      }
//    }
//    else{
//      // Check if note needs to end      
//      if ((current_time - note2_start) >= duration2[k]){
//        note2_active = 0;
//        digitalWrite(notepin2, LOW);
//
//        // Check if already at song end
//        if (k+1 == size2){
////          Serial.println("END2");
//          end2 = 1;
//        }
//        else{
//          note2_end = micros();
//          wait_time2 = start_time2[k+1] - (start_time2[k] + duration2[k]); // consider hardcoding this to reduce cycle time
//        }
//      }

//      // If didn't end, check proper note state and set if needed
//      if (elapsed2 > usec2){
//        state2 = !state2;
//        digitalWrite(notepin2, state2);
//        elapsed2 = 0;
//      }      
//    }

    // If all voices are finished, break out of while loop and play song again
    if (end0 & end1 & end2){
      break;
    }

//    elapsed2 += main_cycle_usec;
    delayMicroseconds(main_cycle_usec);
  }

  digitalWrite(13, HIGH);
  delay(500);
  digitalWrite(13, LOW);
  delay(500);
  digitalWrite(13, HIGH);
  delay(500);
  digitalWrite(13, LOW);
  delay(500);
}
